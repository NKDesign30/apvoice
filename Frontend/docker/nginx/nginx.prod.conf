user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    map $http_x_apo_auth $x_auth_token {
        default "";
        ~. $http_x_apo_auth;  # Regular expression to match any value
    }

    server {
        listen      80;

        # add HSTS Header
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # this block will be used to detect the tld domain and proxy the backend response
        #server_name ~apovoice.(?<tld>\w+)$ apovoice.com;

        server_name apovoice.es;
        resolver 127.0.0.11 valid=30s;
        root    /usr/share/nginx/html;
        index   index.html index.htm;

        charset utf-8; 

        client_max_body_size 64M;

        location ~ ^/wp-json/ {
            # Put the upstream server in a variable. This way nginx will continue
            # startup, even if the upstream server is not available
            set $upstream_host https://backend.apovoice.es;

            proxy_ssl_server_name on;
            # proxy_pass https://$upstream_host$tld$uri;

            proxy_set_header Authorization $x_auth_token;
            proxy_http_version 1.1;
            proxy_pass https://backend.apovoice.es$uri$is_args$args;
        }
        
        location / {
            root    /usr/share/nginx/html;
            try_files $uri /index.html;
            # http basic auth
            # auth_basic "Apovoice Authentication";
            # auth_basic_user_file /etc/nginx/.htpasswd;
        }
    }

    server {
        listen      80;

        # add HSTS Header
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        server_name ~apovoice.(?<tld>(de|at|com))$;
        # server_name stage.apovoice.es apovoice-es-frontend-stage.azurewebsites.net;
        resolver 127.0.0.11 valid=30s;
        root    /usr/share/nginx/html;
        index   index.html index.htm;

        charset utf-8;
        
        client_max_body_size 64M;

        location ~ ^/wp-json/ {
            # Put the upstream server in a variable. This way nginx will continue
            # startup, even if the upstream server is not available
            set $upstream_host https://backend.apovoice.es;

            proxy_ssl_server_name on;

            proxy_set_header Authorization $x_auth_token;
            proxy_http_version 1.1;
            proxy_pass https://backend.apovoice.es/$tld$uri$is_args$args;
        }

        location / {
            root    /usr/share/nginx/html;
            try_files $uri /index.html;
            # http basic auth
            # auth_basic "Apovoice Authentication";
            # auth_basic_user_file /etc/nginx/.htpasswd;
        }
    }

}
