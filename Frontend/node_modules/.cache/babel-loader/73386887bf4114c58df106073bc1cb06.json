{"remainingRequest":"/app/node_modules/babel-loader/lib/index.js!/app/node_modules/eslint-loader/index.js??ref--13-0!/app/src/services/mapper/SurveyMapper.js","dependencies":[{"path":"/app/src/services/mapper/SurveyMapper.js","mtime":1683275992576},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/app/src/services/mapper/SurveyMapper.js"],"names":["get","uniqueId","SurveyMapper","data","id","String","slug","title","description","points","parseInt","duration","time","type","mapDurationType","expires_at","status","chapters","map","chapter","mapChapter","meta","storeEndpoint","isActivatable","training_id","questions","question","mapQuestion","subheadline","isKeyQuestion","isOptional","parentValue","isNested","nestedQuestion","item","value","items","mapRatingItem","ratingType","matrixType","sections","section","sectionTitle","answers","answer","answerTitle","clusterType","choices","choice","mapSingleChoice","console","log","headline","options","option","mapRatingOption","label","tooltip","typeMap","sec","min","hour","survey","additionalFields","result","chapterIndex","flatMap","questionsResult","push","is_key_question","is_optional","forEach","nested","split","find","e","some","val","clusterQuestion","parentQuestion","reduce","accumulator"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\nimport uniqueId from 'lodash/uniqueId';\n\nexport default class SurveyMapper {\n  static mapSurvey(data) {\n    return {\n      id: String(get(data, 'id', '')),\n      slug: get(data, 'slug', ''),\n      title: get(data, 'title.rendered', ''),\n      description: get(data, 'acf.description', ''),\n      points: parseInt(get(data, 'acf.points', 0), 10),\n      duration: {\n        time: parseInt(get(data, 'acf.duration.time', 0), 10),\n        type: SurveyMapper.mapDurationType(get(data, 'acf.duration.type', 'sec')),\n      },\n      expires_at: get(data, 'acf.expires_at', null),\n      status: get(data, 'meta.apo_status.0', null),\n      chapters: get(data, 'acf.chapters', []).map(chapter => SurveyMapper.mapChapter(chapter)),\n      meta: {\n        storeEndpoint: get(data, 'storeEndpoint', ''),\n      },\n      isActivatable: !!parseInt(get(data, 'acf.training_relation.activatable', 0), 10),\n      training_id: get(data, 'acf.training_relation.training', 0),\n    };\n  }\n\n  static mapChapter(data) {\n    // if there is an empty chapter the backend returns false,\n    // to avoid 'map is not a function' conflicts,\n    // catch it and return an empty array\n    if (!data.chapter) return [];\n    return {\n      questions: get(data, 'chapter', []).map(question => SurveyMapper.mapQuestion(question)),\n    };\n  }\n\n  static mapQuestion(data) {\n    const question = {\n      id: uniqueId('sq-'),\n      type: get(data, 'acf_fc_layout', ''),\n      question: get(data, 'question', ''),\n      subheadline: get(data, 'subheadline', ''),\n      isKeyQuestion: get(data, 'is_key_question', false),\n      isOptional: get(data, 'is_optional', false),\n      parentValue: get(data, 'parent_value', ''),\n      isNested: get(data, 'is_nested', false),\n    };\n\n    if (question.isNested) {\n      question.nestedQuestion = get(data, 'nested_question', []).map(item => SurveyMapper.mapQuestion(item));\n    }\n\n    if (question.type === 'rating') {\n      question.value = [];\n    } else if (question.type === 'matrix') {\n      question.value = {};\n    } else {\n      question.value = '';\n    }\n\n    switch (question.type) {\n      case 'rating':\n        question.items = get(data, 'items', []).map(item => SurveyMapper.mapRatingItem(item));\n\n        break;\n\n      case 'rating_icons':\n        question.ratingType = get(data, 'rating_type', '');\n\n        break;\n\n      case 'matrix':\n        question.matrixType = get(data, 'type', '');\n        question.sections = get(data, 'sections', []).map(section => ({ id: uniqueId('sq-sctn-'), sectionTitle: get(section, 'title', '') }));\n        if (question.matrixType === 'single' || question.matrixType === 'multi') question.answers = get(data, 'answers', []).map(answer => ({ id: uniqueId('sq-answ-'), answerTitle: get(answer, 'answer', '') }));\n        else question.answers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(answer => ({ id: uniqueId('sq-answ-'), answerTitle: answer }));\n\n        break;\n\n      case 'question_cluster':\n        question.clusterType = get(data, 'question_type', '');\n        question.questions = get(data, `cluster_${question.clusterType}`, []).map(item => SurveyMapper.mapQuestion(item));\n\n        break;\n\n      case 'choice':\n        question.choices = get(data, 'choices', []).map(choice => SurveyMapper.mapSingleChoice(choice));\n\n        break;\n\n      case 'choice-multi':\n        question.choices = get(data, 'choices', []).map(choice => SurveyMapper.mapSingleChoice(choice));\n        question.value = [];\n\n        break;\n\n      case 'answer-single-line':\n      case 'answer-multi-line':\n      case 'promoter_score':\n        // left blank intentionally\n        break;\n\n      case 'text-paragraph':\n        question.value = get(data, 'copy', '');\n        break;\n\n      default:\n        console.log(`Unknown survey question type \"${question.type}\" discovered. Custom mapping logic required!`);\n    }\n\n    return question;\n  }\n\n  static mapRatingItem(data) {\n    return {\n      id: uniqueId('sq-opt-'),\n      headline: get(data, 'headline', ''),\n      options: get(data, 'options', []).map(option => SurveyMapper.mapRatingOption(option)),\n    };\n  }\n\n  static mapRatingOption(data) {\n    return {\n      id: uniqueId('sq-opt-'),\n      label: get(data, 'label', ''),\n      tooltip: get(data, 'tooltip', ''),\n    };\n  }\n\n  static mapDurationType(type) {\n    const typeMap = {\n      sec: 'seconds',\n      min: 'minutes',\n      hour: 'hours',\n    };\n\n    return typeMap[type];\n  }\n\n  static mapSingleChoice(data) {\n    return {\n      id: uniqueId('sq-sch-'),\n      value: get(data, 'choice', ''),\n      tooltip: get(data, 'tooltip', ''),\n    };\n  }\n\n  static createSurveyPayload(survey, additionalFields = {}) {\n    const result = survey.chapters\n      .map((chapter, chapterIndex) => chapter.questions.flatMap(question => {\n        const questionsResult = [];\n        if (question.type !== 'text-paragraph') {\n          questionsResult.push({\n            chapter: chapterIndex + 1,\n            is_key_question: question.isKeyQuestion,\n            question: question.question,\n            type: question.type,\n            value: question.value,\n            is_optional: question.isOptional,\n          });\n        }\n\n        if (question.isNested) {\n          question.nestedQuestion.forEach(nested => {\n            if (nested.parentValue.split(',').find(e => e === question.value || (typeof question.value === 'object' && question.value.some(val => val.value === e || val === e)))) {\n              if (question.type !== 'text-paragraph') {\n                questionsResult.push({\n                  chapter: chapterIndex + 1,\n                  is_key_question: nested.isKeyQuestion,\n                  question: nested.question,\n                  type: nested.type,\n                  value: nested.value,\n                  is_optional: nested.isOptional,\n                });\n              }\n            }\n          });\n        }\n\n        if (question.type === 'question_cluster') {\n          question.questions.forEach(clusterQuestion => {\n            questionsResult.push({\n              chapter: chapterIndex + 1,\n              is_key_question: clusterQuestion.isKeyQuestion,\n              question: clusterQuestion.question,\n              parentQuestion: question.question,\n              type: clusterQuestion.type,\n              value: clusterQuestion.value,\n              is_optional: clusterQuestion.isOptional,\n            });\n          });\n        }\n\n        return questionsResult;\n      }), [])\n      .reduce((accumulator, questions) => [...accumulator, ...questions], []);\n\n    return {\n      result,\n      ...additionalFields,\n    };\n  }\n}\n"]}]}