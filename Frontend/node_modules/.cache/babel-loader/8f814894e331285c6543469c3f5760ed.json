{"remainingRequest":"/app/node_modules/babel-loader/lib/index.js!/app/node_modules/eslint-loader/index.js??ref--13-0!/app/src/store/modules/knowledge-base.js","dependencies":[{"path":"/app/src/store/modules/knowledge-base.js","mtime":1683275992578},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKCnZhciBfbXV0YXRpb25zLCBfYWN0aW9uczsKCi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovCmltcG9ydCBLbm93bGVkZ2VCYXNlU2VydmljZSBmcm9tICdAL3NlcnZpY2VzL2FwaS9Lbm93bGVkZ2VCYXNlU2VydmljZSc7CmltcG9ydCB7IEtOT1dMRURHRV9CQVNFX0ZFVENIX0FMTCwgS05PV0xFREdFX0JBU0VfRkVUQ0hfT05FIH0gZnJvbSAiLi4vdHlwZXMvYWN0aW9uLXR5cGVzIjsKaW1wb3J0IHsgS05PV0xFREdFX0JBU0VfVVBEQVRFX0tOT1dMRURHRV9CQVNFLCBLTk9XTEVER0VfQkFTRV9VUERBVEVfQ1VSUkVOVF9LTk9XTEVER0VfQkFTRSB9IGZyb20gIi4uL3R5cGVzL211dGF0aW9uLXR5cGVzIjsKZXhwb3J0IGRlZmF1bHQgewogIHN0YXRlOiB7CiAgICBrbm93bGVkZ2VCYXNlOiBbXSwKICAgIGN1cnJlbnRLbm93bGVkZ2VCYXNlOiB7fQogIH0sCiAgbXV0YXRpb25zOiAoX211dGF0aW9ucyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgS05PV0xFREdFX0JBU0VfVVBEQVRFX0tOT1dMRURHRV9CQVNFLCBmdW5jdGlvbiAoc3RhdGUsIHVwZGF0ZWRLbm93bGVkZ2VCYXNlKSB7CiAgICBzdGF0ZS5rbm93bGVkZ2VCYXNlID0gdXBkYXRlZEtub3dsZWRnZUJhc2U7CiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfbXV0YXRpb25zLCBLTk9XTEVER0VfQkFTRV9VUERBVEVfQ1VSUkVOVF9LTk9XTEVER0VfQkFTRSwgZnVuY3Rpb24gKHN0YXRlLCB1cGRhdGVkQ3VycmVudEtub3dsZWRnZUJhc2UpIHsKICAgIHN0YXRlLmtub3dsZWRnZUJhc2UgPSB1cGRhdGVkQ3VycmVudEtub3dsZWRnZUJhc2U7CiAgfSksIF9tdXRhdGlvbnMpLAogIGFjdGlvbnM6IChfYWN0aW9ucyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2FjdGlvbnMsIEtOT1dMRURHRV9CQVNFX0ZFVENIX0FMTCwgZnVuY3Rpb24gKF9yZWYpIHsKICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsCiAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQsCiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlOwoKICAgIGlmIChzdGF0ZS5rbm93bGVkZ2VCYXNlLmxlbmd0aCA9PT0gMCkgewogICAgICBkaXNwYXRjaCgnd2FpdC9zdGFydCcsICdrbm93bGVkZ2VCYXNlUG9zdHMnLCB7CiAgICAgICAgcm9vdDogdHJ1ZQogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBLbm93bGVkZ2VCYXNlU2VydmljZS5mZXRjaEFsbCgpLnRoZW4oZnVuY3Rpb24gKGtub3dsZWRnZUJhc2UpIHsKICAgICAgICBjb21taXQoS05PV0xFREdFX0JBU0VfVVBEQVRFX0tOT1dMRURHRV9CQVNFLCBrbm93bGVkZ2VCYXNlKTsKICAgICAgICBkaXNwYXRjaCgnd2FpdC9lbmQnLCAna25vd2xlZGdlQmFzZVBvc3RzJywgewogICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgIH0pOwogICAgICAgIHJlc29sdmUoa25vd2xlZGdlQmFzZSk7CiAgICAgIH0pLmNhdGNoKHJlamVjdCk7CiAgICB9KTsKICB9KSwgX2RlZmluZVByb3BlcnR5KF9hY3Rpb25zLCBLTk9XTEVER0VfQkFTRV9GRVRDSF9PTkUsIGZ1bmN0aW9uIChfcmVmMiwgaWQpIHsKICAgIHZhciBkaXNwYXRjaCA9IF9yZWYyLmRpc3BhdGNoLAogICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgIGRpc3BhdGNoKCd3YWl0L3N0YXJ0JywgJ2tub3dsZWRnZUJhc2VQb3N0JywgewogICAgICByb290OiB0cnVlCiAgICB9KTsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIEtub3dsZWRnZUJhc2VTZXJ2aWNlLmZldGNoKGlkKS50aGVuKGZ1bmN0aW9uIChrbm93bGVkZ2VCYXNlKSB7CiAgICAgICAgY29tbWl0KEtOT1dMRURHRV9CQVNFX1VQREFURV9DVVJSRU5UX0tOT1dMRURHRV9CQVNFLCBrbm93bGVkZ2VCYXNlKTsKICAgICAgICBkaXNwYXRjaCgnd2FpdC9lbmQnLCAna25vd2xlZGdlQmFzZVBvc3QnLCB7CiAgICAgICAgICByb290OiB0cnVlCiAgICAgICAgfSk7CiAgICAgICAgcmVzb2x2ZShrbm93bGVkZ2VCYXNlKTsKICAgICAgfSkuY2F0Y2gocmVqZWN0KTsKICAgIH0pOwogIH0pLCBfYWN0aW9ucyksCiAgZ2V0dGVyczogewogICAga25vd2xlZGdlQmFzZTogZnVuY3Rpb24ga25vd2xlZGdlQmFzZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUua25vd2xlZGdlQmFzZTsKICAgIH0sCiAgICBjdXJyZW50S25vd2xlZGdlQmFzZTogZnVuY3Rpb24gY3VycmVudEtub3dsZWRnZUJhc2Uoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmN1cnJlbnRLbm93bGVkZ2VCYXNlOwogICAgfSwKICAgIGtub3dsZWRnZUJhc2VCeUlkOiBmdW5jdGlvbiBrbm93bGVkZ2VCYXNlQnlJZChzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgcmV0dXJuIHN0YXRlLmtub3dsZWRnZUJhc2UuZmluZChmdW5jdGlvbiAoa25vd2xlZGdlQmFzZSkgewogICAgICAgICAgcmV0dXJuIGtub3dsZWRnZUJhc2UuaWQgPT09IGlkOwogICAgICAgIH0pOwogICAgICB9OwogICAgfQogIH0KfTs="},{"version":3,"sources":["/app/src/store/modules/knowledge-base.js"],"names":["KnowledgeBaseService","KNOWLEDGE_BASE_FETCH_ALL","KNOWLEDGE_BASE_FETCH_ONE","KNOWLEDGE_BASE_UPDATE_KNOWLEDGE_BASE","KNOWLEDGE_BASE_UPDATE_CURRENT_KNOWLEDGE_BASE","state","knowledgeBase","currentKnowledgeBase","mutations","updatedKnowledgeBase","updatedCurrentKnowledgeBase","actions","dispatch","commit","length","root","Promise","resolve","reject","fetchAll","then","catch","id","fetch","getters","knowledgeBaseById","find"],"mappings":";;;;;;;AAAA;AACA,OAAOA,oBAAP,MAAiC,qCAAjC;AACA,SACEC,wBADF,EAEEC,wBAFF;AAIA,SAASC,oCAAT,EAA+CC,4CAA/C;AAEA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,aAAa,EAAE,EADV;AAELC,IAAAA,oBAAoB,EAAE;AAFjB,GADM;AAMbC,EAAAA,SAAS,gDACNL,oCADM,YACgCE,KADhC,EACuCI,oBADvC,EAC6D;AAClEJ,IAAAA,KAAK,CAACC,aAAN,GAAsBG,oBAAtB;AACD,GAHM,+BAINL,4CAJM,YAIwCC,KAJxC,EAI+CK,2BAJ/C,EAI4E;AACjFL,IAAAA,KAAK,CAACC,aAAN,GAAsBI,2BAAtB;AACD,GANM,cANI;AAebC,EAAAA,OAAO,4CACJV,wBADI,kBACmD;AAAA,QAA3BW,QAA2B,QAA3BA,QAA2B;AAAA,QAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,QAATR,KAAS,QAATA,KAAS;;AACtD,QAAIA,KAAK,CAACC,aAAN,CAAoBQ,MAApB,KAA+B,CAAnC,EAAsC;AACpCF,MAAAA,QAAQ,CAAC,YAAD,EAAe,oBAAf,EAAqC;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAArC,CAAR;AACD;;AAED,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtClB,MAAAA,oBAAoB,CAACmB,QAArB,GACGC,IADH,CACQ,UAAAd,aAAa,EAAI;AACrBO,QAAAA,MAAM,CAACV,oCAAD,EAAuCG,aAAvC,CAAN;AACAM,QAAAA,QAAQ,CAAC,UAAD,EAAa,oBAAb,EAAmC;AAAEG,UAAAA,IAAI,EAAE;AAAR,SAAnC,CAAR;AACAE,QAAAA,OAAO,CAACX,aAAD,CAAP;AACD,OALH,EAKKe,KALL,CAKWH,MALX;AAMD,KAPM,CAAP;AAQD,GAdI,6BAeJhB,wBAfI,mBAe4CoB,EAf5C,EAegD;AAAA,QAAxBV,QAAwB,SAAxBA,QAAwB;AAAA,QAAdC,MAAc,SAAdA,MAAc;AACnDD,IAAAA,QAAQ,CAAC,YAAD,EAAe,mBAAf,EAAoC;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAApC,CAAR;AAEA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtClB,MAAAA,oBAAoB,CAACuB,KAArB,CAA2BD,EAA3B,EACGF,IADH,CACQ,UAAAd,aAAa,EAAI;AACrBO,QAAAA,MAAM,CAACT,4CAAD,EAA+CE,aAA/C,CAAN;AACAM,QAAAA,QAAQ,CAAC,UAAD,EAAa,mBAAb,EAAkC;AAAEG,UAAAA,IAAI,EAAE;AAAR,SAAlC,CAAR;AACAE,QAAAA,OAAO,CAACX,aAAD,CAAP;AACD,OALH,EAKKe,KALL,CAKWH,MALX;AAMD,KAPM,CAAP;AAQD,GA1BI,YAfM;AA4CbM,EAAAA,OAAO,EAAE;AACPlB,IAAAA,aADO,yBACOD,KADP,EACc;AACnB,aAAOA,KAAK,CAACC,aAAb;AACD,KAHM;AAIPC,IAAAA,oBAJO,gCAIcF,KAJd,EAIqB;AAC1B,aAAOA,KAAK,CAACE,oBAAb;AACD,KANM;AAOPkB,IAAAA,iBAPO,6BAOWpB,KAPX,EAOkB;AACvB,aAAO,UAAAiB,EAAE;AAAA,eAAIjB,KAAK,CAACC,aAAN,CAAoBoB,IAApB,CAAyB,UAAApB,aAAa;AAAA,iBAAIA,aAAa,CAACgB,EAAd,KAAqBA,EAAzB;AAAA,SAAtC,CAAJ;AAAA,OAAT;AACD;AATM;AA5CI,CAAf","sourcesContent":["/* eslint-disable no-param-reassign */\nimport KnowledgeBaseService from '@/services/api/KnowledgeBaseService';\nimport {\n  KNOWLEDGE_BASE_FETCH_ALL,\n  KNOWLEDGE_BASE_FETCH_ONE,\n} from '../types/action-types';\nimport { KNOWLEDGE_BASE_UPDATE_KNOWLEDGE_BASE, KNOWLEDGE_BASE_UPDATE_CURRENT_KNOWLEDGE_BASE } from '../types/mutation-types';\n\nexport default {\n  state: {\n    knowledgeBase: [],\n    currentKnowledgeBase: {},\n  },\n\n  mutations: {\n    [KNOWLEDGE_BASE_UPDATE_KNOWLEDGE_BASE](state, updatedKnowledgeBase) {\n      state.knowledgeBase = updatedKnowledgeBase;\n    },\n    [KNOWLEDGE_BASE_UPDATE_CURRENT_KNOWLEDGE_BASE](state, updatedCurrentKnowledgeBase) {\n      state.knowledgeBase = updatedCurrentKnowledgeBase;\n    },\n  },\n\n  actions: {\n    [KNOWLEDGE_BASE_FETCH_ALL]({ dispatch, commit, state }) {\n      if (state.knowledgeBase.length === 0) {\n        dispatch('wait/start', 'knowledgeBasePosts', { root: true });\n      }\n\n      return new Promise((resolve, reject) => {\n        KnowledgeBaseService.fetchAll()\n          .then(knowledgeBase => {\n            commit(KNOWLEDGE_BASE_UPDATE_KNOWLEDGE_BASE, knowledgeBase);\n            dispatch('wait/end', 'knowledgeBasePosts', { root: true });\n            resolve(knowledgeBase);\n          }).catch(reject);\n      });\n    },\n    [KNOWLEDGE_BASE_FETCH_ONE]({ dispatch, commit }, id) {\n      dispatch('wait/start', 'knowledgeBasePost', { root: true });\n\n      return new Promise((resolve, reject) => {\n        KnowledgeBaseService.fetch(id)\n          .then(knowledgeBase => {\n            commit(KNOWLEDGE_BASE_UPDATE_CURRENT_KNOWLEDGE_BASE, knowledgeBase);\n            dispatch('wait/end', 'knowledgeBasePost', { root: true });\n            resolve(knowledgeBase);\n          }).catch(reject);\n      });\n    },\n  },\n\n  getters: {\n    knowledgeBase(state) {\n      return state.knowledgeBase;\n    },\n    currentKnowledgeBase(state) {\n      return state.currentKnowledgeBase;\n    },\n    knowledgeBaseById(state) {\n      return id => state.knowledgeBase.find(knowledgeBase => knowledgeBase.id === id);\n    },\n  },\n};\n"]}]}