{"remainingRequest":"/app/node_modules/babel-loader/lib/index.js!/app/node_modules/eslint-loader/index.js??ref--13-0!/app/src/store/modules/surveys.js","dependencies":[{"path":"/app/src/store/modules/surveys.js","mtime":1683275992578},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKCnZhciBfbXV0YXRpb25zLCBfYWN0aW9uczsKCi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovCi8vIGltcG9ydCB7IHJlc29sdmUgfSBmcm9tICJjb3JlLWpzL2ZuL3Byb21pc2UiOwppbXBvcnQgU3VydmV5U2VydmljZSBmcm9tICdAL3NlcnZpY2VzL2FwaS9TdXJ2ZXlTZXJ2aWNlJzsKaW1wb3J0IHsgU1VSVkVZU19GRVRDSF9BTEwsIFNVUlZFWVNfRkVUQ0hfT05FLCBTVVJWRVlTX1NUT1JFX1JFU1VMVCwgQVVUSF9GRVRDSF9DVVJSRU5UX1VTRVIsIExBVEVTVFNfU1VSVkVZUyB9IGZyb20gIi4uL3R5cGVzL2FjdGlvbi10eXBlcyI7CmltcG9ydCB7IFNVUlZFWVNfVVBEQVRFX1NVUlZFWVMsIFNVUlZFWVNfVVBEQVRFX0NVUlJFTlRfU1VSVkVZLCBVUERBVEVfTEFURVNUX1NVUlZFWVMgfSBmcm9tICIuLi90eXBlcy9tdXRhdGlvbi10eXBlcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogewogICAgc3VydmV5czogW10sCiAgICBjdXJyZW50U3VydmV5OiB7fSwKICAgIGxhdGVzdHNTdXJ2ZXlzOiBbXQogIH0sCiAgbXV0YXRpb25zOiAoX211dGF0aW9ucyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgU1VSVkVZU19VUERBVEVfU1VSVkVZUywgZnVuY3Rpb24gKHN0YXRlLCB1cGRhdGVkU3VydmV5cykgewogICAgc3RhdGUuc3VydmV5cyA9IHVwZGF0ZWRTdXJ2ZXlzOwogIH0pLCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgU1VSVkVZU19VUERBVEVfQ1VSUkVOVF9TVVJWRVksIGZ1bmN0aW9uIChzdGF0ZSwgdXBkYXRlZEN1cnJlbnRTdXJ2ZXkpIHsKICAgIHN0YXRlLmN1cnJlbnRTdXJ2ZXkgPSB1cGRhdGVkQ3VycmVudFN1cnZleTsKICB9KSwgX2RlZmluZVByb3BlcnR5KF9tdXRhdGlvbnMsIFVQREFURV9MQVRFU1RfU1VSVkVZUywgZnVuY3Rpb24gKHN0YXRlLCBsYXRlc3RzU3VydmV5cykgewogICAgc3RhdGUubGF0ZXN0c1N1cnZleXMgPSBsYXRlc3RzU3VydmV5czsKICB9KSwgX211dGF0aW9ucyksCiAgYWN0aW9uczogKF9hY3Rpb25zID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgTEFURVNUU19TVVJWRVlTLCBmdW5jdGlvbiAoX3JlZikgewogICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCwKICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdCwKICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7CgogICAgaWYgKHN0YXRlLmxhdGVzdHNTdXJ2ZXlzLmxlbmd0aCA9PT0gMCkgewogICAgICBkaXNwYXRjaCgnd2FpdC9zdGFydCcsICdsYXRlc3RzU3VydmV5cycsIHsKICAgICAgICByb290OiB0cnVlCiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIFN1cnZleVNlcnZpY2UuZmV0Y2hMYXRlc3RzKCkudGhlbihmdW5jdGlvbiAobGF0ZXN0c1N1cnZleXMpIHsKICAgICAgICBjb21taXQoVVBEQVRFX0xBVEVTVF9TVVJWRVlTLCBsYXRlc3RzU3VydmV5cyk7CiAgICAgICAgZGlzcGF0Y2goJ3dhaXQvZW5kJywgJ2xhdGVzdHNTdXJ2ZXlzJywgewogICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgIH0pOwogICAgICAgIHJlc29sdmUobGF0ZXN0c1N1cnZleXMpOwogICAgICB9KS5jYXRjaChyZWplY3QpOwogICAgfSk7CiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgU1VSVkVZU19GRVRDSF9BTEwsIGZ1bmN0aW9uIChfcmVmMikgewogICAgdmFyIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2gsCiAgICAgICAgY29tbWl0ID0gX3JlZjIuY29tbWl0LAogICAgICAgIHN0YXRlID0gX3JlZjIuc3RhdGU7CgogICAgaWYgKHN0YXRlLnN1cnZleXMubGVuZ3RoID09PSAwKSB7CiAgICAgIGRpc3BhdGNoKCd3YWl0L3N0YXJ0JywgJ3N1cnZleXMnLCB7CiAgICAgICAgcm9vdDogdHJ1ZQogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBTdXJ2ZXlTZXJ2aWNlLmZldGNoQWxsKCkudGhlbihmdW5jdGlvbiAoc3VydmV5cykgewogICAgICAgIGNvbW1pdChTVVJWRVlTX1VQREFURV9TVVJWRVlTLCBzdXJ2ZXlzKTsKICAgICAgICBkaXNwYXRjaCgnd2FpdC9lbmQnLCAnc3VydmV5cycsIHsKICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICB9KTsKICAgICAgICByZXNvbHZlKHN1cnZleXMpOwogICAgICB9KS5jYXRjaChyZWplY3QpOwogICAgfSk7CiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgU1VSVkVZU19GRVRDSF9PTkUsIGZ1bmN0aW9uIChfcmVmMywgaWQpIHsKICAgIHZhciBkaXNwYXRjaCA9IF9yZWYzLmRpc3BhdGNoLAogICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgIGRpc3BhdGNoKCd3YWl0L3N0YXJ0JywgJ3N1cnZleScsIHsKICAgICAgcm9vdDogdHJ1ZQogICAgfSk7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBTdXJ2ZXlTZXJ2aWNlLmZldGNoKGlkKS50aGVuKGZ1bmN0aW9uIChzdXJ2ZXkpIHsKICAgICAgICBjb21taXQoU1VSVkVZU19VUERBVEVfQ1VSUkVOVF9TVVJWRVksIHN1cnZleSk7CiAgICAgICAgZGlzcGF0Y2goJ3dhaXQvZW5kJywgJ3N1cnZleScsIHsKICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICB9KTsKICAgICAgICByZXNvbHZlKHN1cnZleSk7CiAgICAgIH0pLmNhdGNoKHJlamVjdCk7CiAgICB9KTsKICB9KSwgX2RlZmluZVByb3BlcnR5KF9hY3Rpb25zLCBTVVJWRVlTX1NUT1JFX1JFU1VMVCwgZnVuY3Rpb24gKF9yZWY0LCByZXN1bHQpIHsKICAgIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLAogICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdCwKICAgICAgICBkaXNwYXRjaCA9IF9yZWY0LmRpc3BhdGNoOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgU3VydmV5U2VydmljZS5zdG9yZVJlc3VsdHMocmVzdWx0KS50aGVuKGZ1bmN0aW9uIChzdXJ2ZXlSZXN1bHQpIHsKICAgICAgICB2YXIgaW5kZXggPSBzdGF0ZS5zdXJ2ZXlzLmZpbmRJbmRleChmdW5jdGlvbiAocykgewogICAgICAgICAgcmV0dXJuIHMuaWQgPT09IHN1cnZleVJlc3VsdC5zdXJ2ZXlfaWQ7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHN1cnZleSA9IHN0YXRlLnN1cnZleXMuZmluZChmdW5jdGlvbiAocykgewogICAgICAgICAgcmV0dXJuIHMuaWQgPT09IHN1cnZleVJlc3VsdC5zdXJ2ZXlfaWQ7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGNvcGllZFN1cnZleXMgPSBzdGF0ZS5zdXJ2ZXlzLnNsaWNlKCk7CiAgICAgICAgY29waWVkU3VydmV5cy5zcGxpY2UoaW5kZXgsIDEsIHN1cnZleSk7CiAgICAgICAgY29tbWl0KFNVUlZFWVNfVVBEQVRFX1NVUlZFWVMsIGNvcGllZFN1cnZleXMpOwogICAgICAgIGRpc3BhdGNoKEFVVEhfRkVUQ0hfQ1VSUkVOVF9VU0VSKTsKICAgICAgICByZXNvbHZlKHN1cnZleSk7CiAgICAgIH0pLmNhdGNoKHJlamVjdCk7CiAgICB9KTsKICB9KSwgX2FjdGlvbnMpLAogIGdldHRlcnM6IHsKICAgIHN1cnZleXM6IGZ1bmN0aW9uIHN1cnZleXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnN1cnZleXM7CiAgICB9LAogICAgbGF0ZXN0c1N1cnZleXM6IGZ1bmN0aW9uIGxhdGVzdHNTdXJ2ZXlzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5sYXRlc3RzU3VydmV5czsKICAgIH0sCiAgICBjdXJyZW50U3VydmV5OiBmdW5jdGlvbiBjdXJyZW50U3VydmV5KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jdXJyZW50U3VydmV5OwogICAgfSwKICAgIHN1cnZleUJ5SWQ6IGZ1bmN0aW9uIHN1cnZleUJ5SWQoc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpZCkgewogICAgICAgIHJldHVybiBzdGF0ZS5zdXJ2ZXlzLmZpbmQoZnVuY3Rpb24gKHN1cnZleSkgewogICAgICAgICAgcmV0dXJuIHN1cnZleS5pZCA9PT0gaWQ7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/app/src/store/modules/surveys.js"],"names":["SurveyService","SURVEYS_FETCH_ALL","SURVEYS_FETCH_ONE","SURVEYS_STORE_RESULT","AUTH_FETCH_CURRENT_USER","LATESTS_SURVEYS","SURVEYS_UPDATE_SURVEYS","SURVEYS_UPDATE_CURRENT_SURVEY","UPDATE_LATEST_SURVEYS","state","surveys","currentSurvey","latestsSurveys","mutations","updatedSurveys","updatedCurrentSurvey","actions","dispatch","commit","length","root","Promise","resolve","reject","fetchLatests","then","catch","fetchAll","id","fetch","survey","result","storeResults","surveyResult","index","findIndex","s","survey_id","find","copiedSurveys","slice","splice","getters","surveyById"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\n// import { resolve } from \"core-js/fn/promise\";\nimport SurveyService from '@/services/api/SurveyService';\n\nimport {\n  SURVEYS_FETCH_ALL,\n  SURVEYS_FETCH_ONE,\n  SURVEYS_STORE_RESULT,\n  AUTH_FETCH_CURRENT_USER,\n  LATESTS_SURVEYS,\n} from '../types/action-types';\nimport {\n  SURVEYS_UPDATE_SURVEYS,\n  SURVEYS_UPDATE_CURRENT_SURVEY,\n  UPDATE_LATEST_SURVEYS,\n} from '../types/mutation-types';\n\nexport default {\n  state: {\n    surveys: [],\n    currentSurvey: {},\n    latestsSurveys: [],\n  },\n\n  mutations: {\n    [SURVEYS_UPDATE_SURVEYS](state, updatedSurveys) {\n      state.surveys = updatedSurveys;\n    },\n    [SURVEYS_UPDATE_CURRENT_SURVEY](state, updatedCurrentSurvey) {\n      state.currentSurvey = updatedCurrentSurvey;\n    },\n    [UPDATE_LATEST_SURVEYS](state, latestsSurveys) {\n      state.latestsSurveys = latestsSurveys;\n    },\n  },\n\n  actions: {\n    [LATESTS_SURVEYS]({ dispatch, commit, state }) {\n      if (state.latestsSurveys.length === 0) {\n        dispatch('wait/start', 'latestsSurveys', { root: true });\n      }\n\n      return new Promise((resolve, reject) => {\n        SurveyService.fetchLatests()\n          .then(latestsSurveys => {\n            commit(UPDATE_LATEST_SURVEYS, latestsSurveys);\n            dispatch('wait/end', 'latestsSurveys', { root: true });\n            resolve(latestsSurveys);\n          })\n          .catch(reject);\n      });\n    },\n    [SURVEYS_FETCH_ALL]({ dispatch, commit, state }) {\n      if (state.surveys.length === 0) {\n        dispatch('wait/start', 'surveys', { root: true });\n      }\n\n      return new Promise((resolve, reject) => {\n        SurveyService.fetchAll()\n          .then(surveys => {\n            commit(SURVEYS_UPDATE_SURVEYS, surveys);\n            dispatch('wait/end', 'surveys', { root: true });\n            resolve(surveys);\n          })\n          .catch(reject);\n      });\n    },\n    [SURVEYS_FETCH_ONE]({ dispatch, commit }, id) {\n      dispatch('wait/start', 'survey', { root: true });\n\n      return new Promise((resolve, reject) => {\n        SurveyService.fetch(id)\n          .then(survey => {\n            commit(SURVEYS_UPDATE_CURRENT_SURVEY, survey);\n            dispatch('wait/end', 'survey', { root: true });\n            resolve(survey);\n          })\n          .catch(reject);\n      });\n    },\n    [SURVEYS_STORE_RESULT]({ state, commit, dispatch }, result) {\n      return new Promise((resolve, reject) => {\n        SurveyService.storeResults(result)\n          .then(surveyResult => {\n            const index = state.surveys.findIndex(s => s.id === surveyResult.survey_id);\n            const survey = state.surveys.find(s => s.id === surveyResult.survey_id);\n\n            const copiedSurveys = state.surveys.slice();\n            copiedSurveys.splice(index, 1, survey);\n\n            commit(SURVEYS_UPDATE_SURVEYS, copiedSurveys);\n            dispatch(AUTH_FETCH_CURRENT_USER);\n\n            resolve(survey);\n          })\n          .catch(reject);\n      });\n    },\n  },\n\n  getters: {\n    surveys(state) {\n      return state.surveys;\n    },\n    latestsSurveys(state) {\n      return state.latestsSurveys;\n    },\n    currentSurvey(state) {\n      return state.currentSurvey;\n    },\n    surveyById(state) {\n      return id => state.surveys.find(survey => survey.id === id);\n    },\n  },\n};\n"]}]}