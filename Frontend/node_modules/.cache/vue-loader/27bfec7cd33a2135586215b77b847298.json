{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/content/page-indicator/PageIndicator.vue?vue&type=style&index=0&id=d45c7670&lang=scss&scoped=true&","dependencies":[{"path":"/app/src/components/content/page-indicator/PageIndicator.vue","mtime":1683275992554},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50aGVtZS10cmFpbmluZyB7CiAgLnByaW1hcnktYnV0dG9uLWNsYXNzIHsKICAgIEBhcHBseSBiZy10cmFpbmluZy01MDA7CiAgfQogIC5oZWFkLWJhY2tncm91bmQtY2xhc3MgewogICAgQGFwcGx5IGJnLXRyYWluaW5nLTEwMDsKICB9Cn0KCi50aGVtZS1zY2llbnRpZmljIHsKICAucHJpbWFyeS1idXR0b24tY2xhc3MgewogICAgQGFwcGx5IGJnLXNjaWVudGlmaWMtNTAwOwogIH0KICAuaGVhZC1iYWNrZ3JvdW5kLWNsYXNzIHsKICAgIEBhcHBseSBiZy1zY2llbnRpZmljLTEwMDsKICB9Cn0K"},{"version":3,"sources":["PageIndicator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PageIndicator.vue","sourceRoot":"src/components/content/page-indicator","sourcesContent":["<template>\n  <div class=\"page-indicator w-full font-display\">\n    <div\n      class=\"page-indicator__head py-2 text-3xl cursor-pointer head-background-class\"\n      @click=\"toggle\"\n    >\n      <div class=\"container flex\">\n        <span class=\"page-indicator__icon mr-4\">\n          <apo-icon\n            v-if=\"isCompleted\"\n            src=\"radio_checked\"\n            class=\"page-indicator__icon--unchecked w-8 h-8\"\n          />\n          <apo-icon\n            v-else\n            src=\"radio\"\n            class=\"page-indicator__icon--checked w-8 h-8\"\n          />\n        </span>\n        <div\n          class=\"page-indicator__title flex-1\"\n          v-html=\"$options.filters.formatContent(title)\"\n        />\n      </div>\n    </div>\n    <div\n      v-show=\"isOpen\"\n      class=\"page-indicator__body py-8 overflow-hidden\"\n    >\n      <div class=\"container\">\n        <div class=\"page-indicator__content\">\n          <apo-cms-content-renderer\n            v-show=\"content\"\n            :id=\"id\"\n            :components=\"computedContent\"\n          />\n          <slot/>\n        </div>\n        <div\n          v-if=\"withNextButton\"\n          class=\"page-indicator__actions flex justify-center\"\n        >\n          <apo-button\n            class=\"button text-white button--tiny shadow-hard primary-button-class\"\n            @click=\"onContinue\"\n            v-text=\"$t('general.continue')\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport CmsContentRenderer from '@/components/cms/CmsContentRenderer.vue';\n\nexport default {\n  inject: ['pageIndicatorsState'],\n\n  components: {\n    'apo-cms-content-renderer': CmsContentRenderer,\n  },\n\n  props: {\n    id: {\n      type: Number,\n      required: true,\n    },\n\n    title: {\n      type: String,\n      required: true,\n    },\n\n    content: {\n      required: false,\n      default: () => [],\n      validator: prop => typeof prop === 'object' || typeof prop === 'boolean',\n    },\n\n    open: {\n      type: Boolean,\n      required: false,\n      default: false,\n    },\n\n    completed: {\n      type: Boolean,\n      required: false,\n      default: false,\n    },\n\n    withNextButton: {\n      type: Boolean,\n      required: false,\n      default: false,\n    },\n  },\n\n  provide() {\n    return {\n      pageIndicatorState: this.sharedState,\n    };\n  },\n\n  data() {\n    return {\n      sharedState: {\n        isOpen: this.open,\n        isCompleted: this.completed,\n      },\n    };\n  },\n\n  computed: {\n    computedContent() {\n      return this.content ? this.content : [];\n    },\n\n    isOpen: {\n      get() {\n        return this.sharedState.isOpen;\n      },\n\n      set(isOpen) {\n        this.sharedState.isOpen = isOpen;\n        this.updateInjectedState();\n      },\n    },\n\n    isCompleted: {\n      get() {\n        return this.sharedState.isCompleted;\n      },\n      set(isCompleted) {\n        this.sharedState.isCompleted = isCompleted;\n        this.updateInjectedState();\n      },\n    },\n  },\n\n  watch: {\n    open: {\n      immediate: true,\n      handler(isOpen) {\n        this.isOpen = isOpen;\n      },\n    },\n\n    completed: {\n      immediate: true,\n      handler(isCompleted) {\n        this.isCompleted = isCompleted;\n      },\n    },\n\n    isOpen(isOpen) {\n      if (isOpen) {\n        this.$nextTick(() => {\n          this.$scrollTo(this.$el, 500, {\n            x: false,\n            y: true,\n          });\n        });\n      } else {\n        this.complete();\n      }\n    },\n\n    // eslint-disable-next-line func-names\n    'pageIndicatorsState.activePageIndicator': function (activePageIndicatorId) {\n      this.isOpen = activePageIndicatorId === this.id;\n    },\n  },\n\n  methods: {\n    toggle() {\n      if (this.isOpen) {\n        this.closePageIndicator();\n      } else {\n        this.openPageIndicator();\n      }\n    },\n\n    openPageIndicator() {\n      this.pageIndicatorsState.activePageIndicator = this.id;\n    },\n\n    closePageIndicator() {\n      this.pageIndicatorsState.activePageIndicator = null;\n    },\n\n    complete() {\n      this.isCompleted = true;\n    },\n\n    onContinue() {\n      this.complete();\n      this.closePageIndicator();\n\n      this.$parent.$emit('continue', this.id);\n    },\n\n    updateInjectedState() {\n      this.pageIndicatorsState.pageIndicators = this.pageIndicatorsState.pageIndicators\n        .map(pageIndicator => {\n          if (pageIndicator.id === this.id) {\n            /* eslint-disable no-param-reassign */\n            pageIndicator.isOpen = this.isOpen;\n            pageIndicator.isCompleted = this.isCompleted;\n            /* eslint-enable no-param-reassign */\n          }\n\n          return pageIndicator;\n        });\n    },\n  },\n\n  created() {\n    this.pageIndicatorsState.pageIndicators.push({\n      id: this.id,\n      isOpen: this.isOpen,\n      isCompleted: this.isCompleted,\n    });\n  },\n\n  beforeDestroy() {\n    this.pageIndicatorsState.pageIndicators = this.pageIndicatorsState.pageIndicators\n      .filter(indicator => indicator.id !== this.id);\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.theme-training {\n  .primary-button-class {\n    @apply bg-training-500;\n  }\n  .head-background-class {\n    @apply bg-training-100;\n  }\n}\n\n.theme-scientific {\n  .primary-button-class {\n    @apply bg-scientific-500;\n  }\n  .head-background-class {\n    @apply bg-scientific-100;\n  }\n}\n</style>\n"]}]}