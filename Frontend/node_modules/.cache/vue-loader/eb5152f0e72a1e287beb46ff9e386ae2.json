{"remainingRequest":"/app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/V2/training/trainingSci.vue?vue&type=template&id=068bcf46&scoped=true&","dependencies":[{"path":"/app/src/components/V2/training/trainingSci.vue","mtime":1683275992552},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiZmxleCBmbGV4LWNvbCIgfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJmbGV4IGZsZXgtY29sIHctZnVsbCBtYi01IHRhYmxldDpmbGV4LXJvdyB0YWJsZXQ6aXRlbXMtc3RhcnQiCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJmbGV4IGZsZXgtY29sIHctZnVsbCBweC0yIHB5LTMgdGFibGV0OnctMS80IiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgImZsZXgganVzdGlmeS1iZXR3ZWVuIGgtNDAgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtbGciCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgIm9iamVjdC1jb3ZlciBvYmplY3QtdG9wIHctMi8zIGgtZnVsbCByb3VuZGVkLWxnIHRhYmxldDp3LWZ1bGwiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAiYm94LXNoYWRvdyI6ICIwcHggMHB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjIpIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0udHJhaW5pbmcuaW5mb3JtYXRpb25zLmltYWdlLnVybCB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2NrIHctMS80IHBsLTUgdGFibGV0OmhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS50cmFpbmluZy5pbmZvcm1hdGlvbnMuYXBvX3BvaW50cwogICAgICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbGF0aXZlIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImFic29sdXRlIHRleHQtM3hsIHRleHQtd2hpdGUgdG9wLTEwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS50cmFpbmluZy5pbmZvcm1hdGlvbnMuYXBvX3BvaW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICIvYXNzZXRzL2ltZy9hcG9fcG9pbnRzLnN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicCIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICJweC0zIG10LTUgbWwtMCBtci1hdXRvIHRleHQtc20gdGV4dC1yaWdodCB0ZXh0LWdyYXktNzAwIHRhYmxldDpoaWRkZW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiICIgKyBfdm0uX3MoX3ZtLmNhdGVnb3JpZXNOYW1lcyhfdm0udHJhaW5pbmcuY2F0ZWdvcmllcykpICsgIiAiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3LWZ1bGwgcHgtMSBweS0zIHBsLTMgdGFibGV0OnctMi80IiB9LCBbCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIm10LTIiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS50cmFpbmluZy50aXRsZSkgKyAiICIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0udHJhaW5pbmcuaW5mb3JtYXRpb25zLmRlc2NyaXB0aW9uKSArICIgIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZmxleC1jb2wgaGlkZGVuIHctMS80IHB5LTMgcGwtNSB0YWJsZXQ6ZmxleCIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtc20gdGV4dC1yaWdodCB0ZXh0LWdyYXktNzAwIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5jYXRlZ29yaWVzTmFtZXMoX3ZtLnRyYWluaW5nLmNhdGVnb3JpZXMpKSArCiAgICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLnRyYWluaW5nLmluZm9ybWF0aW9ucy5hcG9fcG9pbnRzCiAgICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAicmVsYXRpdmUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgbXQtMiBtbC1hdXRvIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImFic29sdXRlIHRleHQtM3hsIHRleHQtd2hpdGUgdG9wLTEwIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS50cmFpbmluZy5pbmZvcm1hdGlvbnMuYXBvX3BvaW50cykgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL2ltZy9hcG9fcG9pbnRzLnN2ZyIsIGFsdDogIiIgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLm5leHRMZXNzb24KICAgICAgICA/IF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgY2xhc3M6CiAgICAgICAgICAgICAgICAiaGlkZGVuIHctMS80IHB5LTIgbXktNSB0ZXh0LWNlbnRlciB0ZXh0LXdoaXRlIHJvdW5kZWQtZnVsbCB0YWJsZXQ6YmxvY2sgIiArCiAgICAgICAgICAgICAgICBfdm0uYnV0dG9uQ2xhc3MsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICIiICsgdGhpcy4kcm91dGUubmFtZSwKICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICAgICAgc2VyaWVzX2lkOiBfdm0udHJhaW5pbmcuaWQsCiAgICAgICAgICAgICAgICAgICAgc2VyaWVzX3NsdWc6IF92bS50cmFpbmluZy5zbHVnLAogICAgICAgICAgICAgICAgICAgIGlkOiBfdm0udHJhaW5pbmcudHJhaW5pbmdzWzBdLmlkLAogICAgICAgICAgICAgICAgICAgIHRyYWluaW5nX3NsdWc6IF92bS50cmFpbmluZy50cmFpbmluZ3NbMF0uc2x1ZywKICAgICAgICAgICAgICAgICAgICBsZXNzb25faWQ6IF92bS5uZXh0TGVzc29uCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgidHJhaW5pbmdzLnN0YXJ0IikpICsgIiAiKV0KICAgICAgICAgICkKICAgICAgICA6IF92bS5fZSgpLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGlkZGVuIHRhYmxldDpmbGV4IGp1c3RpZnktc3RhcnQiIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLmNvbXBsZXRlKCkKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBjbGFzczoKICAgICAgICAgICAgICAgICAgICAibWF4LXctM3hsIGJveC1ib3JkZXIgdy0xLzIgZGVza3RvcDp3LTEvNCBweS0yIG15LTUgdGV4dC13aGl0ZSByb3VuZGVkLWZ1bGwgIiArCiAgICAgICAgICAgICAgICAgICAgX3ZtLmJ1dHRvbkNsYXNzLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZG93bmxvYWQoX3ZtLnRyYWluaW5nLnRyYWluaW5nc1swXSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoInRyYWluaW5ncy5kb3dubG9hZCIpKSArICIgIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgX3ZtLmNvbXBsZXRlKCkKICAgICAgICAgICAgPyBfYygicm91dGVyLWxpbmsiLCB7CiAgICAgICAgICAgICAgICBjbGFzczoKICAgICAgICAgICAgICAgICAgIm1heC13LTN4bCBib3gtYm9yZGVyIG1sLTIgdy0xLzIgZGVza3RvcDp3LTEvNCBweS0yIG15LTUgdGV4dC13aGl0ZSByb3VuZGVkLWZ1bGwgdGV4dC1jZW50ZXIgIiArCiAgICAgICAgICAgICAgICAgIF92bS5idXR0b25DbGFzcywKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInRyYWluaW5nLXN1bW1hcnkiLAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgICAgICAgICAgc2x1ZzogX3ZtLnRyYWluaW5nLnNsdWcsCiAgICAgICAgICAgICAgICAgICAgICBpZDogX3ZtLnRyYWluaW5nLmlkLAogICAgICAgICAgICAgICAgICAgICAgdGhlbWU6IF92bS50aGVtZSwKICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjogdGhpcy4kcm91dGUubmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHRleHRDb250ZW50OiBfdm0uX3MoX3ZtLiR0KCJnZW5lcmFsLnN1bW1hcnlfc2NpIikpIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleCBmbGV4LXJvdyBqdXN0aWZ5LXN0YXJ0IHctZnVsbCIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZmxleCBmbGV4LXJvdyB3LWZ1bGwiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fbChfdm0ubGVzc29ucywgZnVuY3Rpb24obGVzc29uLCBpbmRleCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogbGVzc29uLmlkLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiZmxleC1yb3cgaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBoaWRkZW4gaC0xMCBwLTMgbXItMyByb3VuZGVkLWxnIHRhYmxldDpmbGV4IHctNzIiLAogICAgICAgICAgICAgICAgICBzdHlsZTogX3ZtLmxlc3NvbkxpbmtTdHlsZShsZXNzb24pLAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0bzogX3ZtLmdldFRyYWluaW5nc0xpbmsobGVzc29uLmxlc3NvbiwgaW5kZXgpIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQteHMiLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IF92bS51c2VySGFzQ29tcGxldGVkTGVzc29uKGxlc3NvbikKICAgICAgICAgICAgICAgICAgICAgICAgPyAiY29sb3I6ICNjY2M7IgogICAgICAgICAgICAgICAgICAgICAgICA6ICJjb2xvcjogI2ZmZiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGxlc3Nvbi5tZXRhX2luZm9zLmR1cmF0aW9uLnRpbWUpICsgIiAiKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWwtMSB0ZXh0LXNtIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBfdm0udXNlckhhc0NvbXBsZXRlZExlc3NvbihsZXNzb24pCiAgICAgICAgICAgICAgICAgICAgICAgID8gImNvbG9yOiAjY2NjOyIKICAgICAgICAgICAgICAgICAgICAgICAgOiAiY29sb3I6ICNmZmYiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhsZXNzb24ubWV0YV9pbmZvcy5kdXJhdGlvbi50eXBlKSArICIgIildCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInctMS8yIGgtNSBteC1hdXRvIHRleHQtc20gdGV4dC1jZW50ZXIiLAogICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICJoaWRkZW4iLAogICAgICAgICAgICAgICAgICAgICAgICAidGV4dC1vdmVyZmxvdyI6ICJlbGxpcHNpcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ3aGl0ZS1zcGFjZSI6ICJub3dyYXAiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IF92bS51c2VySGFzQ29tcGxldGVkTGVzc29uKGxlc3NvbikKICAgICAgICAgICAgICAgICAgICAgICAgPyAiY29sb3I6ICNjY2M7IgogICAgICAgICAgICAgICAgICAgICAgICA6ICJjb2xvcjogI2ZmZiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKGxlc3Nvbi5tZXRhX2luZm9zLnRpdGxlKSArICIgIildCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdy01IGgtNSBiZy13aGl0ZSByb3VuZGVkLWZ1bGwgIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzZXJIYXNDb21wbGV0ZWRMZXNzb24obGVzc29uKQogICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJhcG8taWNvbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidy02IGgtNiB0cmFpbmluZy1sZXNzb25fX2ljb24tLXVuY2hlY2tlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogX3ZtLmNoZWNrQm94Q2xhc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICJyYWRpb19jaGVja2VkIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgOiBfYygiYXBvLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInctNiBoLTYgdHJhaW5pbmctbGVzc29uX19pY29uLS1jaGVja2VkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBfdm0uY2hlY2tCb3hDbGFzcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogInJhZGlvIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ3LWZ1bGwgdGFibGV0OmhpZGRlbiIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImNhcm91c2VsIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidy1mdWxsIG14LWF1dG8iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAicGFnaW5hdGlvbi1lbmFibGVkIjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAicGVyLXBhZ2UiOiBfdm0ubGVzc29ucy5sZW5ndGggPiAxID8gMS41IDogMS41CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLmxlc3NvbnMsIGZ1bmN0aW9uKGxlc3NvbiwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgICAic2xpZGUiLAogICAgICAgICAgICAgICAgICAgICAgeyBrZXk6IGxlc3Nvbi5pZCwgc3RhdGljQ2xhc3M6ICJweC0yIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIHctZnVsbCBoLTEwIHAtMyBteS01IG1yLTMgcm91bmRlZC1sZyAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IF92bS5sZXNzb25MaW5rU3R5bGUobGVzc29uKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBfdm0uZ2V0VHJhaW5pbmdzTGluayhsZXNzb24ubGVzc29uLCBpbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQteHMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBfdm0udXNlckhhc0NvbXBsZXRlZExlc3NvbihsZXNzb24pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICJjb2xvcjogI2NjYzsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJjb2xvcjogI2ZmZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MobGVzc29uLm1ldGFfaW5mb3MuZHVyYXRpb24udGltZSkpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1sLTEgbXItYXV0byB0ZXh0LXNtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogX3ZtLnVzZXJIYXNDb21wbGV0ZWRMZXNzb24obGVzc29uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAiY29sb3I6ICNjY2M7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAiY29sb3I6ICNmZmYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGxlc3Nvbi5tZXRhX2luZm9zLmR1cmF0aW9uLnR5cGUpKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LTUgaC01IGJnLXdoaXRlIHJvdW5kZWQtZnVsbCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udXNlckhhc0NvbXBsZXRlZExlc3NvbihsZXNzb24pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJhcG8taWNvbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ3LTQgaC00IHRyYWluaW5nLWxlc3Nvbl9faWNvbi0tdW5jaGVja2VkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogX3ZtLmNoZWNrQm94Q2xhc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAicmFkaW9fY2hlY2tlZCIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfYygiYXBvLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidy00IGgtNCB0cmFpbmluZy1sZXNzb25fX2ljb24tLWNoZWNrZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBfdm0uY2hlY2tCb3hDbGFzcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICJyYWRpbyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgdmFsdWU6IF92bS5sYW5ndWFnZSAhPSAiZGUiLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJsYW5ndWFnZSAhPSAnZGUnIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJmbGV4IGZsZXgtcm93IGp1c3RpZnktc3RhcnQgdy1mdWxsIHNlbGYtY2VudGVyIGRlc2t0b3A6cC01IHAtMCIKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubGlrZXRlc3QsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibGlrZXRlc3QiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBzdGF0aWNDbGFzczogImgtYXV0byBtYXgtdy1mdWxsIGN1cnNvci1wb2ludGVyXHRoZWFydGhvdmVyIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiMjBweCIgfSwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9oZWFydF9mdWxsLnN2ZyIpLAogICAgICAgICAgICAgIGFsdDogX3ZtLiR0KCJ0ZW1wbGF0ZS5uYXZpZ2F0aW9uLmxvZ28uYWx0IikKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5oYW5kbGVDbGljayB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmxpa2V0ZXN0LAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFsaWtldGVzdCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaC1hdXRvIG1heC13LWZ1bGwgY3Vyc29yLXBvaW50ZXIgaGVhcnRob3ZlciIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjIwcHgiIH0sCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvaGVhcnRfZW1wdHkuc3ZnIiksCiAgICAgICAgICAgICAgYWx0OiBfdm0uJHQoInRlbXBsYXRlLm5hdmlnYXRpb24ubG9nby5hbHQiKQogICAgICAgICAgICB9LAogICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmhhbmRsZUNsaWNrIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiIHBsLTMgcHQtNSIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKHRoaXMuY291bnRMaWtlKSldCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uaGFzRHV0eVRleHQKICAgICAgICA/IF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICJtbC1hdXRvIG1yLTAgdGV4dC1zbSB0ZXh0LXJpZ2h0IHRleHQtZ3JheS03MDAgY3Vyc29yLXBvaW50ZXIgbWFuZGF0b3J5IiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6ICIjNTc1NzU3IiwKICAgICAgICAgICAgICAgICJ0ZXh0LWRlY29yYXRpb24iOiAidW5kZXJsaW5lIiwKICAgICAgICAgICAgICAgICJtYXJnaW4tdG9wIjogIjIwcHgiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0uc2hvd0R1dHlUZXh0ID0gIV92bS5zaG93RHV0eVRleHQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgidHJhaW5pbmdzLmR1dHlUZXh0IikpICsgIiAiKV0KICAgICAgICAgICkKICAgICAgICA6IF92bS5fZSgpLAogICAgICBfYygKICAgICAgICAiYXBvLWNvbGxhcHNpYmxlLWNvbnRlbnQiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtOCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYm94LXNoYWRvdyI6ICJub25lIiB9LAogICAgICAgICAgYXR0cnM6IHsgc2hvdzogX3ZtLnNob3dEdXR5VGV4dCB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uaGFzRHV0eVRleHQKICAgICAgICAgICAgPyBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250YWluZXIgcC02IG14LWF1dG8gYnJlYWstYWxsIiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTRweCFpbXBvcnRhbnQiIH0sCiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0udHJhaW5pbmcuZHV0eVRleHQpIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZmxleCB0YWJsZXQ6aGlkZGVuIiB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5uZXh0TGVzc29uCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBjbGFzczoKICAgICAgICAgICAgICAgICAgICAiYmxvY2sgdy0yLzMgcHktMiBteC1hdXRvIG10LTUgdGV4dC1jZW50ZXIgdGV4dC13aGl0ZSByb3VuZGVkLWZ1bGwgdGFibGV0OmhpZGRlbiAiICsKICAgICAgICAgICAgICAgICAgICBfdm0uYnV0dG9uQ2xhc3MsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdG86IHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ0cmFpbmluZ3MiLAogICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllc19pZDogX3ZtLnRyYWluaW5nLmlkLAogICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXNfc2x1ZzogX3ZtLnRyYWluaW5nLnNsdWcsCiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBfdm0udHJhaW5pbmcudHJhaW5pbmdzWzBdLmlkLAogICAgICAgICAgICAgICAgICAgICAgICB0cmFpbmluZ19zbHVnOiBfdm0udHJhaW5pbmcudHJhaW5pbmdzWzBdLnNsdWcsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlc3Nvbl9pZDogX3ZtLm5leHRMZXNzb24KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoInRyYWluaW5ncy5zdGFydCIpKSArICIgIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJibG9jayB0YWJsZXQ6aGlkZGVuIiB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5jb21wbGV0ZSgpCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgY2xhc3M6CiAgICAgICAgICAgICAgICAgICAgImJsb2NrIHctMi8zICBweS0yIG14LWF1dG8gbXQtNSB0ZXh0LWNlbnRlciB0ZXh0LXdoaXRlIHJvdW5kZWQtZnVsbCAgIiArCiAgICAgICAgICAgICAgICAgICAgX3ZtLmJ1dHRvbkNsYXNzLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZG93bmxvYWQoX3ZtLnRyYWluaW5nLnRyYWluaW5nc1swXSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoInRyYWluaW5ncy5kb3dubG9hZCIpKSArICIgIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgX3ZtLmNvbXBsZXRlKCkKICAgICAgICAgICAgPyBfYygicm91dGVyLWxpbmsiLCB7CiAgICAgICAgICAgICAgICBjbGFzczoKICAgICAgICAgICAgICAgICAgImJsb2NrIHctMi8zICBweS0yIG14LWF1dG8gbXQtNSB0ZXh0LWNlbnRlciB0ZXh0LXdoaXRlIHJvdW5kZWQtZnVsbCAgIiArCiAgICAgICAgICAgICAgICAgIF92bS5idXR0b25DbGFzcywKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInRyYWluaW5nLXN1bW1hcnkiLAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgICAgICAgICAgc2x1ZzogX3ZtLnRyYWluaW5nLnNsdWcsCiAgICAgICAgICAgICAgICAgICAgICBpZDogX3ZtLnRyYWluaW5nLmlkLAogICAgICAgICAgICAgICAgICAgICAgdGhlbWU6IF92bS50aGVtZSwKICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjogdGhpcy4kcm91dGUubmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHRleHRDb250ZW50OiBfdm0uX3MoX3ZtLiR0KCJnZW5lcmFsLnN1bW1hcnlfc2NpIikpIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}