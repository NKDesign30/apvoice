{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/app/src/App.vue","mtime":1683275992542},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKKjo6c2VsZWN0aW9uewogIEBhcHBseSBiZy1wdXJwbGUtNTAwOwogIEBhcHBseSB0ZXh0LXdoaXRlOwp9CgpodG1sLApib2R5LAojYXBwIHsKICBtaW4taGVpZ2h0OiAxMDB2aDsKfQoKYm9keSB7CiAgQGFwcGx5IGJnLXdoaXRlOwp9CgoucGFnZS1wcm9ncmVzcyB7CiAgbWFyZ2luLXRvcDogY2FsYyh0aGVtZSgnc3BhY2luZy5weCcpICogLTIpOwp9CgoudGV4dC1tZWRpYS1wYXJhZ3JhcGhfX2NvcHkgewogIGEgewogICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7CiAgfQp9CgpAbWVkaWEgKG1pbi13aWR0aDogdGhlbWUoJ3NjcmVlbnMuZGVza3RvcCcpKSB7CiAgLnNwYWNlci1tb2R1bGUgewogICAgcGFkZGluZzogMy4xMjVyZW0gMCAhaW1wb3J0YW50OwoKICAgIC50ZXh0LW1lZGlhLXBhcmFncmFwaF9fY29weSB7CiAgICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6RA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div\n    id=\"app\"\n    class=\"flex flex-col font-display text-gray-900\"\n    :class=\"themeClass\"\n  >\n    <apo-header />\n    <apo-page-progress class=\"page-progress\" />\n\n    <vue-page-transition name=\"fade-in-up\">\n      <apo-pharmacy-confirmation-modal v-if=\"isAuthenticated && showUpdatePharmacyModal\" />\n    </vue-page-transition>\n    <vue-page-transition name=\"fade-in-up\">\n      <apo-stage\n        v-if=\"stageData && isAuthenticated\"\n        :stage-data=\"stageData\"\n      />\n    </vue-page-transition>\n\n    <main class=\"flex-auto\">\n      <vue-page-transition name=\"fade-in-up\">\n        <router-view />\n      </vue-page-transition>\n      <apo-cookies-settings v-if=\"language !== 'en'\" />\n    </main>\n\n    <apo-footer />\n  </div>\n</template>\n\n<script>\n\nimport last from 'lodash/last';\nimport { mapGetters, mapState } from 'vuex';\nimport Header from '@/components/template/Header.vue';\nimport Stage from '@/components/template/Stage.vue';\nimport Footer from '@/components/template/Footer.vue';\nimport CookiesSettings from '@/components/template/CookiesSettings.vue';\nimport PharmacyConfirmationModal from '@/components/pharmacies/PharmacyConfirmationModal.vue';\nimport PageProgress from '@/components/template/PageProgress.vue';\nimport PageService from '@/services/api/PageService';\nimport {\n  PAGES_FETCH_MENUS,\n  SETTINGS_FETCH_SETTINGS,\n  SETTINGS_SET_CURRENT_VIEWPORT,\n} from '@/store/types/action-types';\n\nconst screens = require('./tailwind/Screens');\n\nexport default {\n  components: {\n    'apo-footer': Footer,\n    'apo-stage': Stage,\n    'apo-header': Header,\n    'apo-page-progress': PageProgress,\n    'apo-cookies-settings': CookiesSettings,\n    'apo-pharmacy-confirmation-modal': PharmacyConfirmationModal,\n  },\n  data() {\n    return {\n      stageData: '',\n    };\n  },\n\n  computed: {\n    ...mapGetters(['isAuthenticated', 'theme', 'settingsLoaded', 'language', 'showUpdatePharmacyModal']),\n    ...mapState({\n      settings: state => state.settings.settings,\n    }),\n\n    themeClass() {\n      return `theme-${this.theme}`;\n    },\n\n    sortedScreens() {\n      return Object.entries(screens)\n        .sort(([, minWidthA], [, minWidthB]) => {\n          const a = parseInt(minWidthA, 10);\n          const b = parseInt(minWidthB, 10);\n\n          if (a > b) {\n            return 1;\n          }\n\n          if (a < b) {\n            return -1;\n          }\n\n          return 0;\n        });\n    },\n  },\n\n  watch: {\n    isAuthenticated: {\n      immediate: true,\n      handler(isAuthenticated) {\n        if (isAuthenticated) {\n          window.eventBus.$emit('authenticated');\n        }\n      },\n    },\n    settingsLoaded: {\n      immediate: true,\n      handler(settingsLoaded) {\n        if (settingsLoaded) {\n          window.eventBus.$emit('settingsLoaded');\n        }\n      },\n    },\n\n    language: {\n      immediate: true,\n      handler(language) {\n        let docLang = language;\n        if (language === 'at') { docLang = 'de'; }\n        document.documentElement.lang = docLang;\n      },\n    },\n\n    $route: {\n      immediate: true,\n      handler(route) {\n        if (this.isAuthenticated) {\n          this.stageData = '';\n          this.loadStage(route);\n        }\n      },\n    },\n  },\n\n  methods: {\n    initializeState() {\n      this.$store.dispatch(SETTINGS_FETCH_SETTINGS);\n      this.$store.dispatch(PAGES_FETCH_MENUS);\n      if (this.isAuthenticated) {\n        this.$Progress.start();\n        this.$Progress.set(30);\n        PageService.getPages()\n          .then(data => {\n            this.$store.commit('addPageContent', data);\n            const tmpData = data.filter(page => page.acf.slides);\n            tmpData.forEach(page => {\n              this.$store.commit('addStage', { name: page.slug, stage: { minimum_height: page.acf.minimum_height, slides: page.acf.slides } });\n            });\n            this.$Progress.finish();\n            this.loadStage(this.$route);\n          });\n      }\n    },\n\n    loadStage(route) {\n      const storedData = this.$store.state.pages.stages.filter(stage => stage.name === route.path.replace(/\\//g, '')).length === 1 ? this.$store.state.pages.stages.filter(stage => stage.name === route.path.replace(/\\//g, ''))[0].stage : '';\n      if (storedData) {\n        window.setTimeout(() => {\n          this.stageData = storedData;\n        }, 100);\n      }\n    },\n\n    initializeCodeSnippets() {\n      const unwatch = this.$watch('settings', settings => {\n        unwatch();\n\n        this.evaluateCodeSnippets(settings.headCodeSnippets, 'head');\n        this.evaluateCodeSnippets(settings.bodyCodeSnippets, 'body');\n      });\n    },\n\n    evaluateCodeSnippets(snippets, wrappingElement) {\n      this.cleanSnippets(snippets).forEach(codeSnippet => {\n        const attributes = this.extractAttributes(codeSnippet);\n        const scriptTag = document.createElement('script');\n        let fn = null;\n\n        Object.keys(attributes).forEach(key => {\n          if (key === 'onload') {\n            fn = attributes[key];\n          }\n          scriptTag.setAttribute(key, attributes[key]);\n        });\n\n        if (!scriptTag.hasAttribute('type')) {\n          scriptTag.type = 'text/javascript';\n        }\n\n        const strippedCodeSnippet = codeSnippet.replace(/<script[^>]*>/im, '');\n\n        scriptTag.text = strippedCodeSnippet;\n\n        this.loadAsync(scriptTag, wrappingElement)\n          .then(() => {\n            if (fn) {\n              try {\n              // eslint-disable-next-line no-eval\n                eval(fn);\n              } catch (e) {\n                console.log(e);\n              }\n            }\n          });\n      });\n    },\n\n    loadAsync(script, wrappingElement) {\n      return new Promise(resolve => {\n        document.getElementsByTagName(wrappingElement)[0].appendChild(script);\n\n        script.addEventListener('load', () => {\n          // this timeout is required to execute correctly all onload functions\n          // this isn't a great solution but its not so common to add onload attributes\n          // and a good workaround\n          setTimeout(() => {\n            resolve(true);\n          }, 350);\n        });\n      });\n    },\n\n    cleanSnippets(snippets) {\n      return snippets\n        .split(/<\\/script>/im)\n        .map(snippet => snippet.replace(/<!--(.*?)-->/im, ''))\n        .map(snippet => snippet.trim())\n        .filter(snippet => snippet.length > 0);\n    },\n\n    extractAttributes(snippet) {\n      const attributesWithValues = snippet.match(/(\\S*)=\"(.*?)\"/g);\n      if (attributesWithValues) {\n        const values = attributesWithValues.map(a => a.match(/\"(.*?)\"/g)[0].replace(/\"/g, ''));\n        const attributes = attributesWithValues.map(a => a.match(/[^=]*/i)[0]);\n        return attributes.reduce((attribute, key, i) => ({ ...attribute, [key]: values[i] }), {});\n      }\n\n      return {};\n    },\n\n    registerViewportObserver() {\n      this.sortedScreens.forEach(([viewport, minWidth]) => {\n        const mediaQuery = window.matchMedia(`(min-width: ${minWidth})`);\n\n        const listener = event => {\n          if (event.matches) {\n            return this.$store.dispatch(SETTINGS_SET_CURRENT_VIEWPORT, viewport);\n          }\n\n          const matchingViewports = this.sortedScreens\n            // eslint-disable-next-line max-len\n            .filter(([, matchingMinWidth]) => parseInt(minWidth, 10) > parseInt(matchingMinWidth, 10))\n            .map(([matchingViewport]) => matchingViewport);\n\n          const currentViewport = matchingViewports.length > 0\n            ? last(matchingViewports)\n            : 'mobile';\n\n          return this.$store.dispatch(SETTINGS_SET_CURRENT_VIEWPORT, currentViewport);\n        };\n\n        mediaQuery.addListener(listener);\n\n        this.$once('hook:destroyed', () => {\n          mediaQuery.removeListener(listener);\n        });\n\n        if (mediaQuery.matches) {\n          this.$store.dispatch(SETTINGS_SET_CURRENT_VIEWPORT, viewport);\n        }\n      });\n    },\n  },\n\n  created() {\n    this.initializeState();\n    this.initializeCodeSnippets();\n  },\n\n  mounted() {\n    this.registerViewportObserver();\n  },\n};\n\n</script>\n\n<style lang=\"scss\">\n*::selection{\n  @apply bg-purple-500;\n  @apply text-white;\n}\n\nhtml,\nbody,\n#app {\n  min-height: 100vh;\n}\n\nbody {\n  @apply bg-white;\n}\n\n.page-progress {\n  margin-top: calc(theme('spacing.px') * -2);\n}\n\n.text-media-paragraph__copy {\n  a {\n    text-decoration: underline;\n  }\n}\n\n@media (min-width: theme('screens.desktop')) {\n  .spacer-module {\n    padding: 3.125rem 0 !important;\n\n    .text-media-paragraph__copy {\n      margin-top: 0 !important;\n    }\n  }\n}\n</style>\n"]}]}