{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/ui/RadialProgressBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/app/src/components/ui/RadialProgressBar.vue","mtime":1683275992569},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgZGlhbWV0ZXI6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgIGRlZmF1bHQ6IDIwMCwKICAgIH0sCiAgICB0b3RhbFN0ZXBzOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgIGRlZmF1bHQ6IDEwLAogICAgfSwKICAgIGNvbXBsZXRlZFN0ZXBzOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgIGRlZmF1bHQ6IDAsCiAgICB9LAogICAgc3RhcnRDb2xvcjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogJyNiYmZmNDInLAogICAgfSwKICAgIHN0b3BDb2xvcjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogJyM0MjkzMjEnLAogICAgfSwKICAgIHN0cm9rZVdpZHRoOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICBkZWZhdWx0OiAxMCwKICAgIH0sCiAgICBhbmltYXRlU3BlZWQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgIGRlZmF1bHQ6IDEwMDAsCiAgICB9LAogICAgaW5uZXJTdHJva2VDb2xvcjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogJyMzMjMyMzInLAogICAgfSwKICAgIGZwczogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogNjAsCiAgICB9LAogICAgdGltaW5nRnVuYzogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogJ2xpbmVhcicsCiAgICB9LAogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBncmFkaWVudDogewogICAgICAgIGZ4OiAwLjk5LAogICAgICAgIGZ5OiAwLjUsCiAgICAgICAgY3g6IDAuNSwKICAgICAgICBjeTogMC41LAogICAgICAgIHI6IDAuNjUsCiAgICAgIH0sCiAgICAgIGdyYWRpZW50QW5pbWF0aW9uOiBudWxsLAogICAgICBjdXJyZW50QW5nbGU6IDAsCiAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IDAsCiAgICB9OwogIH0sCgogIGNvbXB1dGVkOiB7CiAgICByYWRpdXMoKSB7CiAgICAgIHJldHVybiB0aGlzLmRpYW1ldGVyIC8gMjsKICAgIH0sCgogICAgY2lyY3VtZmVyZW5jZSgpIHsKICAgICAgcmV0dXJuIE1hdGguUEkgKiB0aGlzLmlubmVyQ2lyY2xlRGlhbWV0ZXI7CiAgICB9LAoKICAgIHN0ZXBTaXplKCkgewogICAgICBpZiAodGhpcy50b3RhbFN0ZXBzID09PSAwKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KCiAgICAgIHJldHVybiAxMDAgLyB0aGlzLnRvdGFsU3RlcHM7CiAgICB9LAoKICAgIGZpbmlzaGVkUGVyY2VudGFnZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3RlcFNpemUgKiB0aGlzLmNvbXBsZXRlZFN0ZXBzOwogICAgfSwKCiAgICBjaXJjbGVTbGljZSgpIHsKICAgICAgcmV0dXJuIDIgKiBNYXRoLlBJIC8gdGhpcy50b3RhbFN0ZXBzOwogICAgfSwKCiAgICBhbmltYXRlU2xpY2UoKSB7CiAgICAgIHJldHVybiB0aGlzLmNpcmNsZVNsaWNlIC8gdGhpcy50b3RhbFBvaW50czsKICAgIH0sCgogICAgaW5uZXJDaXJjbGVEaWFtZXRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuZGlhbWV0ZXIgLSAodGhpcy5zdHJva2VXaWR0aCAqIDIpOwogICAgfSwKCiAgICBpbm5lckNpcmNsZVJhZGl1cygpIHsKICAgICAgcmV0dXJuIHRoaXMuaW5uZXJDaXJjbGVEaWFtZXRlciAvIDI7CiAgICB9LAoKICAgIHRvdGFsUG9pbnRzKCkgewogICAgICByZXR1cm4gdGhpcy5hbmltYXRlU3BlZWQgLyB0aGlzLmFuaW1hdGlvbkluY3JlbWVudHM7CiAgICB9LAoKICAgIGFuaW1hdGlvbkluY3JlbWVudHMoKSB7CiAgICAgIHJldHVybiAxMDAwIC8gdGhpcy5mcHM7CiAgICB9LAoKICAgIGhhc0dyYWRpZW50KCkgewogICAgICByZXR1cm4gdGhpcy5zdGFydENvbG9yICE9PSB0aGlzLnN0b3BDb2xvcjsKICAgIH0sCgogICAgY29udGFpbmVyU3R5bGUoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgaGVpZ2h0OiBgJHt0aGlzLmRpYW1ldGVyfXB4YCwKICAgICAgICB3aWR0aDogYCR7dGhpcy5kaWFtZXRlcn1weGAsCiAgICAgIH07CiAgICB9LAoKICAgIHByb2dyZXNzU3R5bGUoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgaGVpZ2h0OiBgJHt0aGlzLmRpYW1ldGVyfXB4YCwKICAgICAgICB3aWR0aDogYCR7dGhpcy5kaWFtZXRlcn1weGAsCiAgICAgICAgc3Ryb2tlV2lkdGg6IGAke3RoaXMuc3Ryb2tlV2lkdGh9cHhgLAogICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IHRoaXMuc3Ryb2tlRGFzaG9mZnNldCwKICAgICAgICB0cmFuc2l0aW9uOiBgc3Ryb2tlLWRhc2hvZmZzZXQgJHt0aGlzLmFuaW1hdGVTcGVlZH1tcyAke3RoaXMudGltaW5nRnVuY31gLAogICAgICB9OwogICAgfSwKCiAgICBzdHJva2VTdHlsZSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBoZWlnaHQ6IGAke3RoaXMuZGlhbWV0ZXJ9cHhgLAogICAgICAgIHdpZHRoOiBgJHt0aGlzLmRpYW1ldGVyfXB4YCwKICAgICAgICBzdHJva2VXaWR0aDogYCR7dGhpcy5zdHJva2VXaWR0aH1weGAsCiAgICAgIH07CiAgICB9LAoKICAgIGlubmVyQ2lyY2xlU3R5bGUoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgd2lkdGg6IGAke3RoaXMuaW5uZXJDaXJjbGVEaWFtZXRlcn1weGAsCiAgICAgIH07CiAgICB9LAogIH0sCgogIHdhdGNoOiB7CiAgICB0b3RhbFN0ZXBzKCkgewogICAgICB0aGlzLmNoYW5nZVByb2dyZXNzKHsgaXNBbmltYXRlOiB0cnVlIH0pOwogICAgfSwKCiAgICBjb21wbGV0ZWRTdGVwcygpIHsKICAgICAgdGhpcy5jaGFuZ2VQcm9ncmVzcyh7IGlzQW5pbWF0ZTogdHJ1ZSB9KTsKICAgIH0sCgogICAgZGlhbWV0ZXIoKSB7CiAgICAgIHRoaXMuY2hhbmdlUHJvZ3Jlc3MoeyBpc0FuaW1hdGU6IHRydWUgfSk7CiAgICB9LAoKICAgIHN0cm9rZVdpZHRoKCkgewogICAgICB0aGlzLmNoYW5nZVByb2dyZXNzKHsgaXNBbmltYXRlOiB0cnVlIH0pOwogICAgfSwKICB9LAoKICBtZXRob2RzOiB7CiAgICBnZXRTdG9wUG9pbnRzT2ZDaXJjbGUoc3RlcHMpIHsKICAgICAgY29uc3QgcG9pbnRzID0gW107CgogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXMKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwczsgaSsrKSB7CiAgICAgICAgY29uc3QgYW5nbGUgPSB0aGlzLmNpcmNsZVNsaWNlICogaTsKICAgICAgICBwb2ludHMucHVzaCh0aGlzLmdldFBvaW50T2ZDaXJjbGUoYW5nbGUpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBvaW50czsKICAgIH0sCgogICAgZ2V0UG9pbnRPZkNpcmNsZShhbmdsZSkgewogICAgICBjb25zdCByYWRpdXMgPSAwLjU7CgogICAgICBjb25zdCB4ID0gcmFkaXVzICsgKHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSk7CiAgICAgIGNvbnN0IHkgPSByYWRpdXMgKyAocmFkaXVzICogTWF0aC5zaW4oYW5nbGUpKTsKCiAgICAgIHJldHVybiB7IHgsIHkgfTsKICAgIH0sCgogICAgZ290b1BvaW50KCkgewogICAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UG9pbnRPZkNpcmNsZSh0aGlzLmN1cnJlbnRBbmdsZSk7CgogICAgICB0aGlzLmdyYWRpZW50LmZ4ID0gcG9pbnQueDsKICAgICAgdGhpcy5ncmFkaWVudC5meSA9IHBvaW50Lnk7CiAgICB9LAoKICAgIGNoYW5nZVByb2dyZXNzKHsgaXNBbmltYXRlID0gdHJ1ZSB9KSB7CiAgICAgIHRoaXMuc3Ryb2tlRGFzaG9mZnNldCA9ICgoMTAwIC0gdGhpcy5maW5pc2hlZFBlcmNlbnRhZ2UpIC8gMTAwKSAqIHRoaXMuY2lyY3VtZmVyZW5jZTsKCiAgICAgIGlmICh0aGlzLmdyYWRpZW50QW5pbWF0aW9uKSB7CiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmdyYWRpZW50QW5pbWF0aW9uKTsKICAgICAgfQoKICAgICAgaWYgKCFpc0FuaW1hdGUpIHsKICAgICAgICB0aGlzLmdvdG9OZXh0U3RlcCgpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgY29uc3QgYW5nbGVPZmZzZXQgPSAodGhpcy5jb21wbGV0ZWRTdGVwcyAtIDEpICogdGhpcy5jaXJjbGVTbGljZTsKICAgICAgbGV0IGkgPSAodGhpcy5jdXJyZW50QW5nbGUgLSBhbmdsZU9mZnNldCkgLyB0aGlzLmFuaW1hdGVTbGljZTsKICAgICAgY29uc3QgaW5jcmVtZW50ZXIgPSBNYXRoLmFicyhpIC0gdGhpcy50b3RhbFBvaW50cykgLyB0aGlzLnRvdGFsUG9pbnRzOwogICAgICBjb25zdCBpc01vdmVGb3J3YXJkID0gaSA8IHRoaXMudG90YWxQb2ludHM7CgogICAgICB0aGlzLmdyYWRpZW50QW5pbWF0aW9uID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1taXhlZC1vcGVyYXRvcnMKICAgICAgICBpZiAoaXNNb3ZlRm9yd2FyZCAmJiBpID49IHRoaXMudG90YWxQb2ludHMKICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW1peGVkLW9wZXJhdG9ycwogICAgICAgICAgICB8fCAhaXNNb3ZlRm9yd2FyZCAmJiBpIDwgdGhpcy50b3RhbFBvaW50cykgewogICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmdyYWRpZW50QW5pbWF0aW9uKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHRoaXMuY3VycmVudEFuZ2xlID0gYW5nbGVPZmZzZXQgKyAodGhpcy5hbmltYXRlU2xpY2UgKiBpKTsKICAgICAgICB0aGlzLmdvdG9Qb2ludCgpOwoKICAgICAgICBpICs9IGlzTW92ZUZvcndhcmQgPyBpbmNyZW1lbnRlciA6IC1pbmNyZW1lbnRlcjsKICAgICAgfSwgdGhpcy5hbmltYXRpb25JbmNyZW1lbnRzKTsKICAgIH0sCgogICAgZ290b05leHRTdGVwKCkgewogICAgICB0aGlzLmN1cnJlbnRBbmdsZSA9IHRoaXMuY29tcGxldGVkU3RlcHMgKiB0aGlzLmNpcmNsZVNsaWNlOwogICAgICB0aGlzLmdvdG9Qb2ludCgpOwogICAgfSwKICB9LAoKICBjcmVhdGVkKCkgewogICAgdGhpcy5jaGFuZ2VQcm9ncmVzcyh7IGlzQW5pbWF0ZTogZmFsc2UgfSk7CiAgfSwKfTsK"},{"version":3,"sources":["RadialProgressBar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"RadialProgressBar.vue","sourceRoot":"src/components/ui","sourcesContent":["<template>\n  <div\n    class=\"radial-progress-container\"\n    :style=\"containerStyle\"\n  >\n    <div\n      class=\"radial-progress-inner\"\n      :style=\"innerCircleStyle\"\n    >\n      <slot />\n    </div>\n    <svg\n      class=\"radial-progress-bar\"\n      :width=\"diameter\"\n      :height=\"diameter\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <defs>\n        <radialGradient\n          :id=\"'radial-gradient' + _uid\"\n          :cx=\"gradient.cx\"\n          :cy=\"gradient.cy\"\n          :r=\"gradient.r\"\n        >\n          <stop\n            offset=\"30%\"\n            :stop-color=\"startColor\"\n          />\n          <stop\n            offset=\"100%\"\n            :stop-color=\"stopColor\"\n          />\n        </radialGradient>\n      </defs>\n      <circle\n        :r=\"innerCircleRadius\"\n        :cx=\"radius\"\n        :cy=\"radius\"\n        fill=\"transparent\"\n        :stroke=\"innerStrokeColor\"\n        :stroke-dasharray=\"circumference\"\n        stroke-dashoffset=\"0\"\n        stroke-linecap=\"round\"\n        :style=\"strokeStyle\"\n      />\n      <circle\n        :transform=\"'rotate(270, ' + radius + ',' + radius + ')'\"\n        :r=\"innerCircleRadius\"\n        :cx=\"radius\"\n        :cy=\"radius\"\n        fill=\"transparent\"\n        :stroke=\"'url(#radial-gradient' + _uid + ')'\"\n        :stroke-dasharray=\"circumference\"\n        :stroke-dashoffset=\"circumference\"\n        stroke-linecap=\"round\"\n        :style=\"progressStyle\"\n      />\n    </svg>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    diameter: {\n      type: Number,\n      required: false,\n      default: 200,\n    },\n    totalSteps: {\n      type: Number,\n      required: true,\n      default: 10,\n    },\n    completedSteps: {\n      type: Number,\n      required: true,\n      default: 0,\n    },\n    startColor: {\n      type: String,\n      required: false,\n      default: '#bbff42',\n    },\n    stopColor: {\n      type: String,\n      required: false,\n      default: '#429321',\n    },\n    strokeWidth: {\n      type: Number,\n      required: false,\n      default: 10,\n    },\n    animateSpeed: {\n      type: Number,\n      required: false,\n      default: 1000,\n    },\n    innerStrokeColor: {\n      type: String,\n      required: false,\n      default: '#323232',\n    },\n    fps: {\n      type: Number,\n      required: false,\n      default: 60,\n    },\n    timingFunc: {\n      type: String,\n      required: false,\n      default: 'linear',\n    },\n  },\n\n  data() {\n    return {\n      gradient: {\n        fx: 0.99,\n        fy: 0.5,\n        cx: 0.5,\n        cy: 0.5,\n        r: 0.65,\n      },\n      gradientAnimation: null,\n      currentAngle: 0,\n      strokeDashoffset: 0,\n    };\n  },\n\n  computed: {\n    radius() {\n      return this.diameter / 2;\n    },\n\n    circumference() {\n      return Math.PI * this.innerCircleDiameter;\n    },\n\n    stepSize() {\n      if (this.totalSteps === 0) {\n        return 0;\n      }\n\n      return 100 / this.totalSteps;\n    },\n\n    finishedPercentage() {\n      return this.stepSize * this.completedSteps;\n    },\n\n    circleSlice() {\n      return 2 * Math.PI / this.totalSteps;\n    },\n\n    animateSlice() {\n      return this.circleSlice / this.totalPoints;\n    },\n\n    innerCircleDiameter() {\n      return this.diameter - (this.strokeWidth * 2);\n    },\n\n    innerCircleRadius() {\n      return this.innerCircleDiameter / 2;\n    },\n\n    totalPoints() {\n      return this.animateSpeed / this.animationIncrements;\n    },\n\n    animationIncrements() {\n      return 1000 / this.fps;\n    },\n\n    hasGradient() {\n      return this.startColor !== this.stopColor;\n    },\n\n    containerStyle() {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n      };\n    },\n\n    progressStyle() {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n        strokeWidth: `${this.strokeWidth}px`,\n        strokeDashoffset: this.strokeDashoffset,\n        transition: `stroke-dashoffset ${this.animateSpeed}ms ${this.timingFunc}`,\n      };\n    },\n\n    strokeStyle() {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n        strokeWidth: `${this.strokeWidth}px`,\n      };\n    },\n\n    innerCircleStyle() {\n      return {\n        width: `${this.innerCircleDiameter}px`,\n      };\n    },\n  },\n\n  watch: {\n    totalSteps() {\n      this.changeProgress({ isAnimate: true });\n    },\n\n    completedSteps() {\n      this.changeProgress({ isAnimate: true });\n    },\n\n    diameter() {\n      this.changeProgress({ isAnimate: true });\n    },\n\n    strokeWidth() {\n      this.changeProgress({ isAnimate: true });\n    },\n  },\n\n  methods: {\n    getStopPointsOfCircle(steps) {\n      const points = [];\n\n      // eslint-disable-next-line no-plusplus\n      for (let i = 0; i < steps; i++) {\n        const angle = this.circleSlice * i;\n        points.push(this.getPointOfCircle(angle));\n      }\n\n      return points;\n    },\n\n    getPointOfCircle(angle) {\n      const radius = 0.5;\n\n      const x = radius + (radius * Math.cos(angle));\n      const y = radius + (radius * Math.sin(angle));\n\n      return { x, y };\n    },\n\n    gotoPoint() {\n      const point = this.getPointOfCircle(this.currentAngle);\n\n      this.gradient.fx = point.x;\n      this.gradient.fy = point.y;\n    },\n\n    changeProgress({ isAnimate = true }) {\n      this.strokeDashoffset = ((100 - this.finishedPercentage) / 100) * this.circumference;\n\n      if (this.gradientAnimation) {\n        clearInterval(this.gradientAnimation);\n      }\n\n      if (!isAnimate) {\n        this.gotoNextStep();\n        return;\n      }\n\n      const angleOffset = (this.completedSteps - 1) * this.circleSlice;\n      let i = (this.currentAngle - angleOffset) / this.animateSlice;\n      const incrementer = Math.abs(i - this.totalPoints) / this.totalPoints;\n      const isMoveForward = i < this.totalPoints;\n\n      this.gradientAnimation = setInterval(() => {\n        // eslint-disable-next-line no-mixed-operators\n        if (isMoveForward && i >= this.totalPoints\n            // eslint-disable-next-line no-mixed-operators\n            || !isMoveForward && i < this.totalPoints) {\n          clearInterval(this.gradientAnimation);\n          return;\n        }\n\n        this.currentAngle = angleOffset + (this.animateSlice * i);\n        this.gotoPoint();\n\n        i += isMoveForward ? incrementer : -incrementer;\n      }, this.animationIncrements);\n    },\n\n    gotoNextStep() {\n      this.currentAngle = this.completedSteps * this.circleSlice;\n      this.gotoPoint();\n    },\n  },\n\n  created() {\n    this.changeProgress({ isAnimate: false });\n  },\n};\n</script>\n\n<style>\n.radial-progress-container {\n  position: relative;\n}\n\n.radial-progress-inner {\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n  position: absolute;\n  border-radius: 50%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n</style>\n"]}]}