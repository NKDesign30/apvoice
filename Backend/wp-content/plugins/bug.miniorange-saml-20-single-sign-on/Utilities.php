<?php


include_once "\170\155\x6c\163\145\x63\x6c\151\x62\x73\56\x70\150\160";
use RobRichards\XMLSecLibs\XMLSecurityKey;
use RobRichards\XMLSecLibs\XMLSecurityDSig;
use RobRichards\XMLSecLibs\XMLSecEnc;
class Utilities
{
    public static function generateID()
    {
        return "\x5f" . self::stringToHex(self::generateRandomBytes(21));
    }
    public static function stringToHex($AO)
    {
        $qm = '';
        $fD = 0;
        LWS:
        if (!($fD < strlen($AO))) {
            goto MbD;
        }
        $qm .= sprintf("\45\60\62\170", ord($AO[$fD]));
        q3e:
        $fD++;
        goto LWS;
        MbD:
        return $qm;
    }
    public static function generateRandomBytes($ey, $MS = TRUE)
    {
        return openssl_random_pseudo_bytes($ey);
    }
    public static function createAuthnRequest($T1, $NK, $c9, $r9 = "\146\141\x6c\x73\145", $FY = "\110\x74\x74\160\122\145\144\x69\162\145\x63\x74", $zD = '')
    {
        $zD = "\x75\x72\x6e\72\x6f\141\163\151\163\x3a\x6e\141\155\145\163\x3a\x74\143\72\123\101\x4d\x4c\72" . $zD;
        $EV = "\74\77\x78\x6d\x6c\40\x76\145\x72\163\x69\x6f\156\x3d\x22\x31\56\x30\x22\x20\x65\156\143\x6f\x64\x69\156\x67\x3d\x22\125\x54\106\55\70\x22\x3f\x3e" . "\74\163\x61\x6d\x6c\x70\72\101\165\164\150\156\x52\145\161\x75\x65\163\x74\40\x78\155\x6c\x6e\x73\x3a\163\141\155\x6c\160\x3d\42\x75\162\156\72\157\x61\x73\151\x73\x3a\156\141\155\145\163\x3a\x74\143\x3a\x53\101\x4d\114\72\x32\x2e\x30\72\160\162\157\164\157\x63\x6f\x6c\42\40\x78\x6d\154\x6e\163\75\42\x75\x72\x6e\72\157\141\x73\151\163\x3a\156\x61\155\145\163\x3a\x74\x63\72\x53\101\x4d\114\72\x32\56\60\72\x61\163\163\x65\162\164\x69\x6f\156\x22\40\111\104\x3d\42" . self::generateID() . "\42\x20\x56\x65\x72\163\151\x6f\x6e\x3d\x22\62\x2e\x30\x22\x20\111\x73\163\x75\x65\x49\156\163\x74\141\x6e\164\75\x22" . self::generateTimestamp() . "\x22";
        if (!($r9 == "\164\x72\165\145")) {
            goto OKr;
        }
        $EV .= "\40\106\x6f\162\143\145\101\x75\x74\150\156\x3d\42\164\162\165\x65\x22";
        OKr:
        $EV .= "\40\120\162\157\164\x6f\143\x6f\154\x42\x69\156\144\151\156\147\75\42\x75\162\x6e\72\157\x61\x73\x69\163\72\x6e\141\x6d\145\163\72\164\143\x3a\123\x41\x4d\114\72\62\56\60\72\x62\x69\x6e\144\151\x6e\147\x73\72\x48\124\124\x50\x2d\120\117\123\x54\42\x20\x41\x73\x73\145\162\x74\151\157\156\103\x6f\x6e\163\165\x6d\x65\x72\x53\145\x72\166\x69\143\145\x55\122\x4c\x3d\42" . $T1 . "\42\40\x44\145\163\164\x69\x6e\x61\164\x69\157\156\75\42" . $c9 . "\x22\x3e\x3c\163\x61\x6d\x6c\x3a\x49\x73\x73\165\145\x72\40\170\155\154\156\x73\x3a\x73\x61\x6d\x6c\75\42\x75\162\156\x3a\157\x61\163\151\163\x3a\156\x61\x6d\x65\163\x3a\x74\x63\72\x53\x41\115\x4c\72\62\x2e\x30\x3a\141\163\163\145\x72\x74\151\x6f\x6e\42\76" . $NK . "\x3c\57\163\141\155\x6c\72\x49\163\163\x75\x65\162\x3e\x3c\163\141\x6d\154\x70\x3a\116\141\155\145\x49\x44\x50\157\154\151\143\x79\40\x41\x6c\x6c\x6f\x77\x43\x72\145\141\164\145\x3d\42\164\162\x75\x65\42\40\x46\157\162\155\141\164\75\x22" . $zD . "\x22\xd\xa\40\x20\40\x20\x20\40\40\40\x20\40\40\x20\x20\x20\x20\40\x20\40\40\40\x20\40\x20\40\x2f\x3e\x3c\57\x73\141\x6d\154\x70\72\101\x75\164\x68\x6e\122\x65\x71\x75\145\x73\x74\76";
        if (empty($FY) || $FY == "\110\164\x74\x70\122\x65\144\151\162\x65\x63\164") {
            goto qAp;
        }
        $V2 = gzdeflate($EV);
        $Dt = base64_encode($V2);
        update_site_option("\x6d\x6f\137\163\141\x6d\154\x5f\162\145\x71\x75\145\x73\164", $Dt);
        goto Mpv;
        qAp:
        $V2 = gzdeflate($EV);
        $Dt = base64_encode($V2);
        update_site_option("\155\157\x5f\x73\141\x6d\154\137\162\145\x71\165\x65\x73\x74", $Dt);
        $Dq = urlencode($Dt);
        $EV = $Dq;
        Mpv:
        return $EV;
    }
    public static function createLogoutRequest($k9, $NK, $c9, $ri = '', $e1 = "\110\164\x74\160\122\x65\x64\151\x72\x65\143\164")
    {
        $EV = "\x3c\x3f\170\155\x6c\40\x76\145\x72\x73\151\x6f\x6e\x3d\42\61\56\60\42\40\145\156\x63\x6f\144\151\156\x67\x3d\x22\125\124\x46\55\x38\x22\77\76" . "\74\x73\x61\155\154\160\72\114\x6f\x67\x6f\x75\x74\122\145\161\165\x65\x73\164\x20\x78\155\154\x6e\163\x3a\163\141\x6d\x6c\160\x3d\42\x75\x72\156\x3a\x6f\141\163\x69\x73\x3a\x6e\141\155\x65\163\72\164\143\72\123\x41\115\114\72\x32\56\60\72\x70\162\x6f\x74\157\143\157\x6c\x22\40\x78\x6d\x6c\156\163\72\163\x61\x6d\x6c\x3d\x22\165\162\x6e\x3a\x6f\141\x73\x69\163\x3a\156\x61\155\145\x73\72\x74\x63\72\x53\x41\x4d\x4c\72\62\56\60\x3a\x61\x73\163\x65\162\x74\151\157\156\x22\40\x49\x44\75\42" . self::generateID() . "\42\x20\111\x73\x73\x75\145\111\x6e\163\x74\x61\156\164\x3d\x22" . self::generateTimestamp() . "\42\x20\126\x65\162\x73\151\157\156\x3d\42\62\56\x30\x22\x20\x44\x65\163\164\x69\156\x61\164\x69\157\x6e\x3d\42" . $c9 . "\42\x3e\xd\xa\11\11\11\11\x9\x9\x3c\163\141\x6d\x6c\x3a\x49\x73\x73\x75\145\x72\40\x78\x6d\x6c\156\x73\72\163\141\x6d\154\x3d\x22\x75\162\x6e\72\x6f\x61\163\151\x73\72\156\141\155\145\163\72\x74\143\72\x53\101\115\x4c\x3a\62\x2e\x30\x3a\141\x73\x73\x65\162\x74\x69\157\x6e\42\x3e" . $NK . "\74\x2f\x73\x61\x6d\154\x3a\x49\x73\163\x75\145\x72\76\xd\12\11\11\11\x9\x9\x9\74\x73\141\x6d\154\x3a\116\141\x6d\x65\111\104\x20\170\x6d\x6c\x6e\x73\72\x73\141\155\154\75\x22\165\162\x6e\72\157\141\x73\151\x73\72\156\x61\x6d\x65\163\72\x74\143\72\123\x41\115\x4c\x3a\x32\x2e\60\x3a\x61\163\x73\x65\x72\164\151\x6f\x6e\42\x3e" . $k9[0] . "\x3c\57\x73\x61\x6d\154\x3a\116\141\x6d\145\x49\104\x3e";
        if (empty($ri)) {
            goto PC1;
        }
        $EV .= "\x3c\x73\x61\x6d\154\160\x3a\123\x65\163\x73\151\157\156\111\x6e\x64\145\170\76" . $ri[0] . "\74\x2f\163\141\155\154\x70\x3a\123\x65\x73\x73\x69\157\x6e\111\156\x64\x65\x78\x3e";
        PC1:
        $EV .= "\74\x2f\163\x61\x6d\x6c\x70\72\x4c\157\147\x6f\x75\164\122\145\161\165\x65\x73\x74\76";
        if (!(empty($e1) || $e1 == "\x48\x74\164\160\x52\145\144\151\x72\145\143\x74")) {
            goto R_T;
        }
        $V2 = gzdeflate($EV);
        $Dt = base64_encode($V2);
        $Dq = urlencode($Dt);
        $EV = $Dq;
        R_T:
        return $EV;
    }
    public static function createLogoutResponse($hK, $NK, $c9, $e1 = "\110\x74\x74\x70\x52\x65\144\151\x72\x65\143\164")
    {
        $EV = "\x3c\x3f\x78\155\x6c\x20\166\145\162\163\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\40\x65\156\x63\x6f\144\x69\156\x67\x3d\x22\x55\x54\x46\x2d\70\x22\77\x3e" . "\74\x73\x61\155\x6c\x70\72\x4c\157\147\x6f\165\x74\122\x65\163\x70\x6f\x6e\x73\x65\40\170\x6d\x6c\x6e\x73\x3a\x73\141\x6d\x6c\160\x3d\x22\x75\x72\156\x3a\x6f\x61\x73\151\x73\x3a\156\141\x6d\145\163\72\164\143\x3a\x53\x41\x4d\x4c\72\x32\x2e\60\x3a\160\162\x6f\164\x6f\x63\157\154\42\x20\170\155\154\156\x73\72\163\x61\x6d\x6c\x3d\x22\165\162\156\x3a\157\141\163\x69\x73\x3a\156\x61\155\145\x73\x3a\164\x63\x3a\x53\101\x4d\x4c\x3a\62\56\60\72\x61\163\x73\x65\x72\x74\151\157\156\42\x20" . "\111\104\75\42" . self::generateID() . "\42\x20" . "\x56\x65\x72\163\x69\x6f\x6e\x3d\x22\x32\56\60\x22\40\111\x73\163\x75\145\111\x6e\x73\x74\141\156\x74\75\42" . self::generateTimestamp() . "\42\40" . "\104\x65\x73\x74\151\156\141\x74\151\x6f\156\75\42" . $c9 . "\42\x20" . "\111\x6e\122\145\x73\160\157\x6e\x73\145\124\x6f\x3d\42" . $hK . "\x22\76" . "\74\x73\141\x6d\x6c\72\111\x73\x73\x75\x65\162\40\x78\155\x6c\x6e\x73\72\x73\141\155\154\75\x22\165\x72\156\72\157\141\x73\x69\x73\x3a\156\x61\x6d\145\x73\72\x74\x63\x3a\x53\x41\115\x4c\x3a\x32\56\x30\72\141\x73\x73\x65\162\164\151\157\x6e\42\76" . $NK . "\x3c\57\163\141\x6d\x6c\72\111\163\x73\x75\145\x72\x3e" . "\74\163\141\x6d\154\x70\72\123\164\141\164\165\x73\76\x3c\163\x61\155\154\x70\72\123\164\141\x74\x75\x73\103\157\144\145\40\126\x61\154\x75\145\75\x22\x75\162\x6e\x3a\157\x61\x73\x69\163\72\156\x61\x6d\145\163\x3a\x74\143\72\x53\101\x4d\114\x3a\x32\56\60\x3a\x73\x74\x61\164\165\x73\72\x53\165\x63\x63\x65\x73\x73\x22\x2f\76\74\x2f\x73\x61\x6d\x6c\x70\x3a\123\x74\141\164\165\x73\x3e\x3c\57\x73\x61\155\154\160\72\x4c\x6f\147\x6f\165\x74\x52\x65\x73\160\x6f\x6e\163\x65\76";
        if (!(empty($e1) || $e1 == "\110\x74\164\160\x52\145\144\151\x72\145\143\164")) {
            goto R0j;
        }
        $V2 = gzdeflate($EV);
        $Dt = base64_encode($V2);
        $Dq = urlencode($Dt);
        $EV = $Dq;
        R0j:
        return $EV;
    }
    public static function generateTimestamp($KT = NULL)
    {
        if (!($KT === NULL)) {
            goto rdZ;
        }
        $KT = time();
        rdZ:
        return gmdate("\131\x2d\155\55\x64\x5c\124\110\72\x69\x3a\163\x5c\132", $KT);
    }
    public static function xpQuery(DOMNode $m8, $p4)
    {
        static $eX = NULL;
        if ($m8 instanceof DOMDocument) {
            goto gIn;
        }
        $gQ = $m8->ownerDocument;
        goto yb3;
        gIn:
        $gQ = $m8;
        yb3:
        if (!($eX === NULL || !$eX->document->isSameNode($gQ))) {
            goto bvn;
        }
        $eX = new DOMXPath($gQ);
        $eX->registerNamespace("\x73\157\141\160\x2d\145\x6e\166", "\150\164\x74\x70\x3a\x2f\x2f\x73\143\150\x65\155\141\163\56\170\155\154\x73\157\141\160\56\157\162\x67\x2f\163\x6f\141\160\57\x65\156\x76\145\x6c\157\160\145\57");
        $eX->registerNamespace("\x73\x61\x6d\x6c\x5f\160\162\x6f\x74\x6f\143\157\x6c", "\165\x72\x6e\x3a\x6f\x61\x73\151\163\72\156\141\155\145\163\72\164\x63\72\x53\101\115\x4c\x3a\62\56\60\72\160\x72\x6f\164\157\x63\x6f\x6c");
        $eX->registerNamespace("\x73\x61\155\x6c\x5f\x61\163\163\145\x72\164\151\x6f\x6e", "\x75\x72\x6e\x3a\157\x61\163\x69\x73\x3a\x6e\x61\x6d\x65\163\72\x74\x63\x3a\123\101\x4d\114\72\62\x2e\x30\x3a\141\163\x73\145\162\164\151\157\156");
        $eX->registerNamespace("\163\141\x6d\154\137\x6d\x65\164\x61\144\x61\x74\141", "\x75\x72\x6e\x3a\x6f\x61\x73\x69\x73\72\156\141\155\145\163\x3a\164\143\x3a\123\x41\x4d\114\72\62\x2e\60\72\x6d\145\164\141\144\x61\x74\141");
        $eX->registerNamespace("\x64\x73", "\150\164\x74\x70\x3a\x2f\x2f\x77\x77\167\x2e\x77\x33\x2e\157\162\x67\57\62\60\60\x30\x2f\x30\x39\57\170\155\x6c\x64\x73\x69\147\43");
        $eX->registerNamespace("\x78\145\x6e\x63", "\x68\x74\164\160\72\57\57\167\x77\x77\x2e\x77\63\x2e\x6f\x72\x67\x2f\x32\x30\x30\x31\57\60\64\x2f\x78\x6d\154\x65\156\x63\43");
        bvn:
        $eP = $eX->query($p4, $m8);
        $qm = array();
        $fD = 0;
        STp:
        if (!($fD < $eP->length)) {
            goto yQs;
        }
        $qm[$fD] = $eP->item($fD);
        gkn:
        $fD++;
        goto STp;
        yQs:
        return $qm;
    }
    public static function parseNameId(DOMElement $DH)
    {
        $qm = array("\x56\x61\x6c\x75\145" => trim($DH->textContent));
        foreach (array("\116\x61\155\145\x51\165\x61\x6c\151\146\151\145\162", "\x53\120\x4e\x61\155\145\121\165\x61\x6c\151\146\151\145\162", "\106\x6f\x72\155\x61\164") as $nj) {
            if (!$DH->hasAttribute($nj)) {
                goto k1d;
            }
            $qm[$nj] = $DH->getAttribute($nj);
            k1d:
            HiD:
        }
        s66:
        return $qm;
    }
    public static function xsDateTimeToTimestamp($P3)
    {
        $yK = array();
        $xb = "\57\x5e\50\x5c\x64\x5c\x64\134\x64\134\x64\51\55\x28\x5c\x64\x5c\x64\51\55\x28\134\144\x5c\x64\51\x54\50\x5c\x64\x5c\144\51\x3a\50\134\144\134\x64\51\x3a\50\134\x64\134\144\x29\50\x3f\72\x5c\56\134\x64\x2b\x29\x3f\132\44\57\104";
        if (!(preg_match($xb, $P3, $yK) == 0)) {
            goto nqn;
        }
        echo sprintf("\x6e\166\141\x6c\151\x64\x20\x53\101\x4d\114\x32\40\x74\151\x6d\145\163\x74\141\155\x70\40\x70\141\x73\163\x65\144\40\x74\157\40\x78\163\x44\141\x74\145\124\151\155\145\x54\157\124\x69\155\x65\x73\164\141\155\x70\72\x20" . $P3);
        exit;
        nqn:
        $zI = intval($yK[1]);
        $Au = intval($yK[2]);
        $kR = intval($yK[3]);
        $Z5 = intval($yK[4]);
        $yb = intval($yK[5]);
        $z2 = intval($yK[6]);
        $Ji = gmmktime($Z5, $yb, $z2, $Au, $kR, $zI);
        return $Ji;
    }
    public static function extractStrings(DOMElement $zy, $n2, $se)
    {
        $qm = array();
        $m8 = $zy->firstChild;
        lO3:
        if (!($m8 !== NULL)) {
            goto RpW;
        }
        if (!($m8->namespaceURI !== $n2 || $m8->localName !== $se)) {
            goto WQ4;
        }
        goto GT7;
        WQ4:
        $qm[] = trim($m8->textContent);
        GT7:
        $m8 = $m8->nextSibling;
        goto lO3;
        RpW:
        return $qm;
    }
    public static function validateElement(DOMElement $WB)
    {
        $p6 = new XMLSecurityDSig();
        $p6->idKeys[] = "\x49\104";
        $ll = self::xpQuery($WB, "\56\57\144\x73\72\123\151\x67\156\141\x74\x75\162\x65");
        if (count($ll) === 0) {
            goto TJk;
        }
        if (count($ll) > 1) {
            goto C3W;
        }
        goto yQ3;
        TJk:
        return FALSE;
        goto yQ3;
        C3W:
        echo sprintf("\x58\x4d\114\x53\145\x63\72\x20\x6d\x6f\x72\x65\x20\164\150\141\x6e\40\157\x6e\145\40\163\x69\147\x6e\x61\164\x75\162\145\x20\x65\154\145\155\x65\156\164\x20\x69\x6e\40\x72\157\157\x74\56");
        exit;
        yQ3:
        $ll = $ll[0];
        $p6->sigNode = $ll;
        $p6->canonicalizeSignedInfo();
        if ($p6->validateReference()) {
            goto FaR;
        }
        echo sprintf("\130\115\x4c\163\x65\x63\72\x20\x64\151\147\145\163\164\40\166\141\x6c\x69\144\x61\164\151\x6f\x6e\x20\146\141\x69\x6c\145\144");
        exit;
        FaR:
        $cW = FALSE;
        foreach ($p6->getValidatedNodes() as $PF) {
            if ($PF->isSameNode($WB)) {
                goto xLO;
            }
            if ($WB->parentNode instanceof DOMDocument && $PF->isSameNode($WB->ownerDocument)) {
                goto XDD;
            }
            goto cQ_;
            xLO:
            $cW = TRUE;
            goto Wp2;
            goto cQ_;
            XDD:
            $cW = TRUE;
            goto Wp2;
            cQ_:
            Yd1:
        }
        Wp2:
        if ($cW) {
            goto vFR;
        }
        echo sprintf("\130\x4d\114\x53\145\143\x3a\x20\x54\150\x65\x20\162\x6f\157\x74\x20\x65\x6c\145\155\x65\x6e\x74\40\x69\x73\40\x6e\x6f\164\x20\x73\x69\x67\x6e\145\144\x2e");
        exit;
        vFR:
        $UH = array();
        foreach (self::xpQuery($ll, "\56\x2f\144\163\x3a\x4b\x65\x79\x49\156\x66\157\x2f\x64\163\72\x58\65\x30\x39\x44\141\164\141\x2f\x64\163\x3a\130\65\x30\x39\x43\x65\x72\164\151\146\x69\x63\x61\164\145") as $r2) {
            $mE = trim($r2->textContent);
            $mE = str_replace(array("\15", "\12", "\11", "\x20"), '', $mE);
            $UH[] = $mE;
            asm:
        }
        vQW:
        $qm = array("\x53\x69\147\156\141\164\x75\162\145" => $p6, "\103\145\x72\x74\151\146\151\x63\141\164\x65\x73" => $UH);
        return $qm;
    }
    public static function validateSignature(array $nq, XMLSecurityKey $ez)
    {
        $p6 = $nq["\x53\x69\147\156\141\164\x75\162\x65"];
        $p1 = self::xpQuery($p6->sigNode, "\x2e\57\x64\x73\x3a\123\151\147\156\145\144\111\x6e\146\157\x2f\144\x73\72\x53\151\x67\156\x61\x74\x75\162\145\x4d\x65\164\150\157\x64");
        if (!empty($p1)) {
            goto a9e;
        }
        echo sprintf("\115\151\163\x73\x69\156\147\40\123\151\x67\156\141\164\165\x72\x65\x4d\x65\x74\150\157\144\40\145\x6c\x65\155\x65\156\164");
        exit;
        a9e:
        $p1 = $p1[0];
        if ($p1->hasAttribute("\x41\154\147\x6f\x72\151\164\150\x6d")) {
            goto jxZ;
        }
        echo sprintf("\x4d\151\163\x73\x69\x6e\147\x20\x41\x6c\147\x6f\162\151\x74\150\155\55\141\x74\164\x72\151\x62\x75\164\x65\x20\157\x6e\x20\123\x69\x67\x6e\x61\164\x75\x72\145\x4d\x65\x74\150\x6f\x64\x20\x65\x6c\x65\x6d\145\156\164\56");
        exit;
        jxZ:
        $Wd = $p1->getAttribute("\x41\x6c\147\x6f\162\x69\164\x68\155");
        if (!($ez->type === XMLSecurityKey::RSA_SHA1 && $Wd !== $ez->type)) {
            goto RdR;
        }
        $ez = self::castKey($ez, $Wd);
        RdR:
        if ($p6->verify($ez)) {
            goto EgA;
        }
        return false;
        EgA:
    }
    public static function castKey(XMLSecurityKey $ez, $HJ, $Si = "\160\165\142\154\151\143")
    {
        if (!($ez->type === $HJ)) {
            goto ove;
        }
        return $ez;
        ove:
        $Gn = openssl_pkey_get_details($ez->key);
        if (!($Gn === FALSE)) {
            goto t17;
        }
        echo sprintf("\x55\156\x61\142\x6c\x65\x20\164\x6f\40\x67\145\164\x20\153\145\171\x20\x64\145\x74\141\151\154\x73\x20\x66\162\157\155\x20\130\x4d\114\123\x65\143\x75\162\x69\x74\x79\x4b\x65\x79\56");
        exit;
        t17:
        if (isset($Gn["\153\145\x79"])) {
            goto Aei;
        }
        echo sprintf("\115\151\163\x73\x69\x6e\147\x20\153\145\171\x20\x69\x6e\x20\160\165\x62\154\x69\x63\x20\x6b\x65\x79\40\144\x65\x74\141\151\x6c\163\x2e");
        exit;
        Aei:
        $KY = new XMLSecurityKey($HJ, array("\x74\171\160\x65" => $Si));
        $KY->loadKey($Gn["\x6b\x65\x79"]);
        return $KY;
    }
    public static function processResponse($Oe, $pR, $cz, SAML2_Response $Dr, $EJ, $fG)
    {
        $Qo = current($Dr->getAssertions());
        $OE = $Qo->getNotBefore();
        if (!($OE !== NULL && $OE > time() + 60)) {
            goto CD5;
        }
        wp_die("\x52\145\x63\x65\x69\166\145\x64\40\x61\156\x20\x61\163\x73\145\162\164\151\x6f\x6e\40\x74\150\141\164\40\151\163\x20\x76\x61\154\151\144\40\x69\156\x20\164\x68\145\x20\146\x75\x74\x75\162\x65\56\x20\x43\150\x65\143\x6b\x20\x63\x6c\157\x63\153\40\x73\x79\x6e\143\x68\x72\x6f\156\151\x7a\x61\x74\151\157\x6e\40\157\x6e\x20\x49\144\120\40\x61\156\x64\x20\123\120\x2e");
        CD5:
        $Xh = $Qo->getNotOnOrAfter();
        if (!($Xh !== NULL && $Xh <= time() - 60)) {
            goto EYV;
        }
        wp_die("\122\145\x63\x65\x69\166\x65\144\40\x61\156\40\141\x73\163\145\x72\x74\x69\157\156\40\x74\150\x61\x74\x20\x68\141\x73\40\x65\170\160\x69\162\145\x64\56\40\x43\150\145\x63\153\40\x63\x6c\157\x63\x6b\x20\163\171\156\143\x68\x72\x6f\156\151\x7a\x61\164\x69\x6f\x6e\x20\157\156\x20\111\144\120\40\x61\156\144\x20\x53\120\56");
        EYV:
        $zL = $Qo->getSessionNotOnOrAfter();
        if (!($zL !== NULL && $zL <= time() - 60)) {
            goto cZa;
        }
        wp_die("\122\145\x63\145\x69\166\145\144\40\141\x6e\40\141\163\163\145\162\164\x69\x6f\x6e\x20\167\151\x74\150\40\141\x20\x73\145\x73\x73\151\157\156\40\164\x68\x61\x74\x20\x68\141\x73\x20\x65\170\160\x69\x72\x65\x64\x2e\40\x43\150\145\143\x6b\40\143\154\157\x63\153\x20\163\171\156\143\150\x72\x6f\156\151\172\141\164\x69\157\x6e\40\157\156\x20\111\144\120\x20\141\156\144\40\123\120\56");
        cZa:
        $Gr = $Dr->getDestination();
        if (!(substr($Gr, -1) == "\x2f")) {
            goto Wfc;
        }
        $Gr = substr($Gr, 0, -1);
        Wfc:
        if (!(substr($Oe, -1) == "\x2f")) {
            goto DbH;
        }
        $Oe = substr($Oe, 0, -1);
        DbH:
        if (!($Gr !== NULL && $Gr !== $Oe)) {
            goto JRL;
        }
        echo "\104\x65\163\x74\x69\x6e\x61\x74\151\157\156\40\x69\156\x20\x72\145\163\x70\x6f\156\163\145\40\144\157\x65\163\156\47\x74\40\155\141\164\143\150\40\164\x68\145\40\x63\165\x72\162\145\156\x74\40\125\122\114\x2e\x20\x44\x65\163\x74\x69\x6e\141\x74\151\157\x6e\40\151\163\40\x22" . htmlspecialchars($Gr) . "\42\x2c\x20\x63\x75\x72\x72\145\x6e\x74\40\x55\x52\114\40\x69\163\40\42" . htmlspecialchars($Oe) . "\42\x2e";
        exit;
        JRL:
        $j0 = self::checkSign($pR, $cz, $EJ, $fG);
        return $j0;
    }
    public static function checkSign($pR, $cz, $EJ, $fG)
    {
        $UH = $cz["\103\x65\x72\164\x69\x66\x69\143\x61\x74\145\163"];
        if (count($UH) === 0) {
            goto mFu;
        }
        $rI = array();
        $rI[] = $pR;
        $Xc = self::findCertificate($rI, $UH, $fG);
        if ($Xc) {
            goto zbl;
        }
        return FALSE;
        zbl:
        goto Qtb;
        mFu:
        $z7 = maybe_unserialize(get_site_option("\163\141\x6d\154\137\170\x35\x30\x39\137\143\145\x72\164\x69\x66\151\143\x61\164\x65"));
        $Xc = $z7[$EJ];
        Qtb:
        $vx = NULL;
        $ez = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array("\164\x79\160\145" => "\160\x75\x62\x6c\151\143"));
        $ez->loadKey($Xc);
        try {
            self::validateSignature($cz, $ez);
            return TRUE;
        } catch (Exception $aW) {
            $vx = $aW;
            return FALSE;
        }
        if ($vx !== NULL) {
            goto N88;
        }
        return FALSE;
        goto KEZ;
        N88:
        throw $vx;
        KEZ:
    }
    public static function validateIssuerAndAudience($Be, $E_, $c3, $fG)
    {
        $NK = current($Be->getAssertions())->getIssuer();
        $Qo = current($Be->getAssertions());
        $hG = $Qo->getValidAudiences();
        if (strcmp($c3, $NK) === 0) {
            goto M7k;
        }
        if ($fG == "\x74\x65\x73\164\126\x61\154\x69\144\x61\x74\x65" or $fG == "\x74\x65\x73\164\116\145\167\103\145\x72\x74\151\146\151\143\x61\x74\145") {
            goto W_i;
        }
        wp_die("\x57\145\40\143\157\165\x6c\144\40\156\x6f\164\40\x73\151\x67\x6e\x20\171\157\x75\40\151\x6e\x2e\40\120\x6c\145\141\163\x65\x20\143\157\156\164\141\x63\164\x20\x79\x6f\165\162\40\x41\144\155\151\x6e\151\163\x74\162\x61\x74\x6f\x72", "\x45\x72\162\x6f\x72\40\x3a\x49\x73\x73\165\x65\x72\x20\143\141\156\156\x6f\164\x20\x62\x65\x20\166\x65\162\151\146\151\x65\x64");
        goto eNW;
        W_i:
        ob_end_clean();
        $iV = mo_options_error_constants::Error_issuer_not_verfied;
        $Se = mo_options_error_constants::Cause_issuer_not_verfied;
        echo "\74\x64\x69\x76\40\x73\x74\x79\x6c\x65\75\42\146\x6f\156\x74\55\146\141\x6d\x69\154\x79\x3a\103\x61\x6c\x69\x62\162\x69\73\160\x61\x64\144\x69\x6e\147\x3a\60\40\x33\x25\73\42\76";
        echo "\74\x64\151\166\40\x73\x74\171\154\x65\x3d\42\x63\x6f\x6c\x6f\162\72\40\43\141\71\x34\64\64\x32\x3b\142\141\x63\x6b\x67\162\157\165\156\144\55\x63\x6f\154\157\x72\72\40\43\146\x32\144\x65\x64\145\73\160\x61\x64\x64\x69\x6e\147\x3a\x20\x31\65\x70\170\x3b\x6d\x61\162\147\151\x6e\x2d\x62\x6f\x74\x74\157\155\x3a\40\x32\60\x70\x78\73\164\145\x78\x74\x2d\141\x6c\x69\x67\x6e\x3a\143\x65\156\x74\x65\162\x3b\x62\157\162\144\145\x72\72\x31\x70\x78\x20\x73\x6f\154\x69\144\40\x23\105\66\x42\x33\x42\62\x3b\x66\157\156\164\x2d\x73\151\x7a\145\x3a\61\x38\160\164\x3b\42\x3e\40\105\122\122\x4f\122\x3c\x2f\x64\151\166\x3e\xd\xa\x9\x9\11\40\x3c\x64\151\x76\x20\163\x74\171\x6c\145\x3d\42\143\x6f\x6c\157\162\x3a\x20\x23\x61\71\x34\64\64\62\x3b\146\157\x6e\x74\x2d\x73\x69\x7a\145\x3a\x31\x34\160\164\73\40\155\x61\x72\x67\151\156\55\142\157\164\164\x6f\x6d\x3a\x32\x30\160\170\73\42\76\x3c\160\x3e\74\163\x74\162\x6f\156\x67\x3e\105\x72\162\x6f\162\x3a\x20\74\x2f\163\164\x72\x6f\156\147\x3e\x49\163\x73\x75\145\162\x20\x63\x61\156\x6e\x6f\164\40\142\145\40\166\x65\162\x69\x66\151\x65\144\x2e\x3c\x2f\160\x3e\xd\xa\x9\11\x9\40\x3c\160\x3e\x50\154\x65\x61\163\145\x20\x63\157\156\x74\141\143\x74\40\x79\x6f\165\x72\x20\x61\x64\x6d\x69\156\151\x73\164\162\x61\x74\157\162\40\x61\156\x64\x20\162\x65\x70\157\162\x74\x20\x74\x68\x65\40\146\157\154\x6c\157\x77\151\x6e\x67\x20\145\162\x72\157\x72\72\x3c\57\x70\76\15\xa\11\x9\x9\40\x3c\x70\76\74\x73\164\x72\157\x6e\x67\76\x50\x6f\x73\163\x69\x62\x6c\x65\40\103\141\x75\163\145\x3a\x20\74\57\x73\164\x72\157\156\147\x3e\x49\144\x50\40\105\156\x74\x69\164\x79\x20\x49\x44\40\x63\x6f\x6e\x66\151\147\165\162\x65\144\40\x69\x6e\x20\164\150\145\40\x70\x6c\165\147\151\156\x20\151\163\40\x69\156\x63\157\x72\x72\145\143\x74\x3c\x2f\160\x3e\15\xa\x9\x9\x9\40\74\160\76\74\x73\164\x72\x6f\156\147\76\x45\156\x74\x69\x74\x79\40\x49\104\40\x69\x6e\x20\x53\101\115\114\x20\122\x65\163\x70\157\x6e\163\x65\72\40\x3c\x2f\163\x74\162\x6f\156\x67\x3e" . $NK . "\74\x70\76\15\12\11\11\11\40\x3c\160\76\74\163\x74\162\x6f\156\x67\x3e\105\x6e\164\151\164\x79\x20\111\104\40\x63\x6f\156\146\151\x67\165\x72\145\144\x20\151\x6e\x20\164\x68\x65\40\160\x6c\x75\147\151\x6e\72\x20\x3c\57\x73\x74\162\x6f\156\x67\x3e" . $c3 . "\x3c\x2f\x70\x3e\15\12\x9\11\x9\40\74\x70\76\x3c\163\164\x72\157\156\x67\x3e\x53\157\x6c\165\x74\x69\x6f\x6e\72\74\x2f\163\x74\x72\157\x6e\x67\x3e\x3c\x2f\x70\x3e\15\12\x9\x9\11\11\x3c\157\x6c\76\15\12\x9\11\x9\x9\11\74\x6c\x69\x3e\x43\157\x70\x79\40\164\150\145\x20\105\x6e\x74\x69\164\171\x20\111\x44\x20\157\146\x20\x53\x41\x4d\114\40\x52\145\163\x70\157\156\x73\x65\x20\146\x72\157\155\x20\x61\142\157\166\x65\x20\x61\x6e\x64\x20\160\141\x73\x74\145\x20\151\164\x20\x69\156\x20\105\156\164\x69\164\x79\40\x49\104\x20\x6f\x72\40\111\x73\x73\165\x65\162\x20\x66\x69\x65\154\144\40\x75\156\x64\x65\162\x20\123\x65\x72\x76\151\143\145\x20\120\x72\x6f\x76\151\144\x65\x72\x20\x53\145\x74\165\160\x20\x74\141\142\56\x3c\57\154\151\76\15\xa\11\11\11\11\74\x2f\157\154\76\xd\xa\x9\11\x9\40\x3c\57\144\151\166\76\xd\xa\x9\x9\x9\40\74\144\x69\x76\x20\x73\x74\171\x6c\x65\x3d\42\x6d\x61\162\147\x69\x6e\72\63\x25\x3b\144\151\x73\160\154\x61\171\x3a\x62\x6c\157\143\x6b\x3b\x74\x65\170\164\x2d\141\x6c\151\147\x6e\72\143\x65\156\x74\145\x72\73\x22\76\xd\xa\11\x9\x9\40\74\x64\x69\x76\x20\x73\x74\171\x6c\145\75\42\x6d\x61\162\x67\x69\x6e\72\x33\x25\x3b\x64\x69\x73\160\154\x61\171\x3a\x62\154\157\x63\153\x3b\x74\145\x78\x74\x2d\141\x6c\x69\147\156\72\143\145\x6e\164\x65\x72\73\42\x3e\x3c\x69\x6e\160\165\x74\40\x73\164\171\x6c\145\x3d\x22\x70\141\x64\144\151\x6e\147\x3a\61\x25\x3b\x77\151\x64\x74\150\x3a\x31\x30\60\160\x78\73\142\141\x63\x6b\x67\162\x6f\x75\x6e\144\72\x20\x23\60\60\71\x31\x43\104\x20\156\157\156\145\x20\162\145\x70\145\x61\x74\40\163\x63\162\157\x6c\x6c\40\x30\45\x20\60\x25\73\x63\165\162\163\157\162\x3a\40\x70\157\151\x6e\x74\x65\x72\73\x66\157\x6e\164\55\163\151\172\x65\x3a\61\x35\x70\x78\73\x62\x6f\162\x64\145\162\x2d\x77\151\x64\164\x68\72\x20\x31\x70\170\73\142\x6f\x72\x64\x65\162\55\x73\164\x79\154\145\72\x20\163\157\154\151\x64\73\142\x6f\162\x64\145\x72\x2d\x72\x61\144\x69\165\163\x3a\x20\63\x70\170\x3b\x77\150\151\x74\145\55\x73\x70\x61\143\145\72\40\x6e\x6f\167\x72\141\160\73\142\157\170\55\163\151\172\x69\156\147\72\40\x62\157\162\x64\145\162\55\x62\157\x78\x3b\x62\x6f\x72\144\x65\x72\x2d\x63\157\154\x6f\162\72\40\43\x30\60\67\63\101\x41\x3b\142\157\170\55\x73\x68\141\144\x6f\167\72\40\60\x70\x78\x20\x31\160\x78\x20\x30\x70\170\40\x72\147\x62\141\x28\61\62\x30\54\x20\62\60\x30\x2c\40\62\x33\60\54\x20\60\56\x36\x29\x20\151\156\x73\145\x74\73\x63\157\154\157\162\72\x20\x23\x46\106\106\73\42\164\x79\x70\x65\x3d\42\x62\165\164\x74\x6f\156\42\40\x76\x61\154\x75\145\x3d\42\104\157\156\145\42\x20\157\156\103\x6c\x69\x63\153\75\42\163\145\x6c\x66\56\143\x6c\157\163\145\50\x29\73\42\76\74\57\x64\151\166\76";
        mo_saml_download_logs($iV, $Se);
        exit;
        eNW:
        goto qqK;
        M7k:
        if (empty($hG)) {
            goto CCI;
        }
        if (in_array($E_, $hG, TRUE)) {
            goto ED4;
        }
        if ($fG == "\x74\145\163\x74\126\x61\154\x69\x64\141\164\x65" or $fG == "\x74\145\163\164\116\x65\167\103\x65\x72\164\151\x66\151\x63\141\x74\145") {
            goto bMP;
        }
        wp_die("\127\x65\40\143\157\x75\154\x64\x20\x6e\157\x74\x20\x73\151\x67\x6e\x20\171\157\165\x20\x69\156\56\x20\120\x6c\x65\141\x73\x65\40\x63\157\x6e\x74\141\x63\x74\40\171\157\165\162\40\101\x64\x6d\x69\x6e\x69\163\x74\162\141\164\x6f\x72", "\105\162\x72\x6f\x72\x20\x3a\111\x6e\x76\x61\x6c\151\144\40\x41\165\x64\151\145\x6e\x63\x65\40\125\122\x49");
        goto xTQ;
        bMP:
        $iV = mo_options_error_constants::Error_invalid_audience;
        $Se = mo_options_error_constants::Cause_invalid_audience;
        ob_end_clean();
        echo "\x3c\144\x69\x76\40\163\x74\x79\154\x65\x3d\x22\146\x6f\x6e\x74\55\146\x61\155\x69\x6c\x79\x3a\103\x61\x6c\x69\142\x72\x69\x3b\160\141\x64\x64\x69\156\x67\72\x30\40\63\x25\x3b\42\76";
        echo "\x3c\144\151\166\40\x73\164\x79\x6c\x65\x3d\42\143\x6f\154\x6f\x72\72\x20\x23\141\x39\64\x34\x34\62\73\142\141\143\x6b\147\x72\x6f\x75\156\x64\x2d\x63\157\154\x6f\x72\72\40\43\146\x32\144\x65\144\145\x3b\x70\x61\144\144\x69\x6e\x67\x3a\40\61\65\x70\x78\73\x6d\141\x72\x67\151\156\55\x62\157\x74\164\157\155\72\40\x32\x30\x70\170\73\164\x65\x78\x74\x2d\x61\154\x69\147\x6e\x3a\143\145\156\x74\x65\162\x3b\142\x6f\162\x64\x65\x72\x3a\x31\x70\170\40\x73\x6f\x6c\151\144\40\43\x45\x36\102\x33\102\62\x3b\146\x6f\156\x74\55\x73\x69\172\145\x3a\x31\70\x70\164\73\x22\x3e\x20\105\122\122\117\x52\74\57\x64\151\x76\x3e\xd\12\40\x20\x20\40\x20\40\x20\x20\x20\40\40\x20\x20\x20\40\40\x20\x20\40\40\74\x64\151\x76\x20\163\164\171\154\x65\75\x22\x63\157\x6c\157\x72\x3a\x20\43\141\71\x34\x34\64\62\x3b\146\x6f\x6e\x74\x2d\x73\151\172\x65\x3a\x31\x34\x70\x74\73\40\x6d\x61\x72\147\x69\x6e\55\142\157\x74\x74\x6f\155\72\x32\60\x70\x78\x3b\x22\76\74\160\x3e\x3c\x73\164\x72\x6f\x6e\x67\76\x45\162\162\157\162\72\x20\74\57\163\164\x72\157\156\147\x3e\111\x6e\x76\141\x6c\151\144\40\101\165\144\151\x65\156\x63\x65\40\x55\122\111\x2e\74\57\160\76\15\xa\x20\40\x20\x20\40\40\x20\40\40\x20\40\40\x20\40\40\40\40\x20\x20\x20\x3c\160\76\120\154\x65\141\x73\x65\x20\x63\x6f\x6e\164\141\x63\164\x20\x79\157\165\x72\40\x61\144\155\151\x6e\x69\163\x74\x72\x61\164\x6f\x72\x20\x61\156\144\x20\x72\145\160\x6f\162\x74\x20\x74\150\145\x20\x66\x6f\x6c\x6c\x6f\x77\151\x6e\x67\40\145\x72\162\157\162\72\74\57\160\x3e\15\xa\40\x20\x20\40\40\x20\40\40\40\x20\40\x20\x20\40\x20\40\x20\x20\x20\x20\74\160\x3e\x3c\163\164\x72\157\x6e\147\76\x50\x6f\163\163\151\x62\154\x65\x20\x43\141\x75\x73\x65\72\40\74\x2f\163\164\x72\157\156\x67\x3e\124\150\x65\x20\x76\141\x6c\x75\145\40\157\146\40\x27\101\x75\144\151\x65\156\x63\145\40\125\122\111\x27\x20\x66\x69\145\154\x64\40\157\x6e\40\111\x64\x65\156\x74\x69\x74\171\x20\x50\162\157\x76\151\144\x65\x72\47\x73\x20\x73\151\x64\x65\x20\151\163\x20\x69\x6e\x63\x6f\x72\x72\x65\143\164\74\x2f\160\76\15\xa\40\40\x20\40\40\40\x20\40\x20\40\40\40\40\40\x20\x20\40\40\40\x20\x3c\160\x3e\105\170\x70\145\143\x74\x65\144\x20\157\x6e\145\40\x6f\146\x20\x74\x68\x65\40\x41\x75\144\x69\145\156\143\145\163\40\x74\x6f\40\142\x65\72\40" . $E_ . "\74\x70\76\15\xa\11\x9\11\x9\11\74\160\x3e\x3c\x73\164\162\157\x6e\147\x3e\123\157\x6c\165\164\151\157\x6e\72\x3c\57\163\x74\x72\x6f\156\x67\x3e\74\57\160\76\xd\xa\x9\x9\x9\x9\x9\x3c\157\x6c\x3e\xd\xa\x9\x9\x9\11\x9\11\x3c\154\x69\x3e\x43\x6f\x70\x79\x20\164\150\x65\40\105\170\160\145\x63\x74\x65\x64\40\101\165\x64\x69\x65\x6e\x63\145\x20\125\x52\x49\x20\146\x72\157\x6d\40\x61\142\x6f\x76\x65\40\141\156\144\x20\160\x61\x73\164\145\x20\x69\164\x20\x69\x6e\40\164\x68\x65\40\x41\x75\x64\151\145\x6e\x63\x65\40\x55\122\x49\x20\146\x69\x65\x6c\x64\40\x61\164\40\111\x64\x65\x6e\x74\x69\x74\171\x20\120\162\x6f\x76\x69\x64\x65\x72\x20\x73\x69\144\145\x2e\x3c\57\154\x69\76\xd\xa\11\x9\x9\11\11\x3c\x2f\157\154\x3e\15\xa\11\x9\11\x9\x9\74\57\144\151\x76\x3e\xd\xa\x20\x20\x20\40\40\x20\40\x20\40\x20\x20\x20\40\x20\40\x20\x20\40\x20\40\x3c\x64\x69\166\x20\163\164\x79\154\x65\75\x22\155\141\162\x67\151\x6e\72\63\45\x3b\144\151\163\x70\154\x61\171\72\142\154\x6f\x63\x6b\73\x74\x65\x78\164\x2d\x61\x6c\151\x67\x6e\x3a\143\x65\156\164\145\x72\x3b\42\76\xd\xa\40\40\x20\x20\40\40\40\40\40\x20\x20\40\x20\x20\x20\40\40\40\x20\x20\x3c\144\151\166\x20\x73\x74\x79\x6c\x65\75\x22\155\x61\162\147\151\156\72\63\45\73\x64\x69\163\160\x6c\141\x79\x3a\x62\x6c\157\x63\153\73\164\x65\x78\x74\x2d\x61\x6c\151\147\156\x3a\x63\x65\156\164\x65\x72\x3b\x22\x3e\x3c\151\x6e\x70\x75\x74\40\x73\164\171\x6c\145\x3d\x22\160\141\x64\144\x69\x6e\147\72\x31\x25\x3b\x77\x69\x64\x74\x68\x3a\x31\x30\x30\x70\x78\73\x62\x61\x63\153\x67\x72\x6f\x75\x6e\x64\72\40\43\60\60\x39\61\103\x44\40\x6e\x6f\156\145\40\x72\145\160\x65\x61\164\40\x73\x63\162\x6f\154\x6c\x20\60\x25\x20\x30\x25\73\x63\x75\x72\x73\157\162\72\40\160\x6f\x69\x6e\x74\x65\x72\x3b\146\x6f\x6e\x74\x2d\163\x69\x7a\145\x3a\61\x35\160\x78\73\142\x6f\x72\x64\145\x72\x2d\167\x69\x64\x74\150\x3a\40\x31\x70\x78\x3b\x62\x6f\162\144\145\x72\x2d\163\164\171\x6c\145\72\40\163\157\x6c\x69\144\73\142\157\x72\x64\x65\x72\55\162\141\144\151\165\163\72\x20\x33\x70\x78\x3b\167\150\151\164\x65\x2d\x73\x70\141\x63\145\72\x20\156\x6f\x77\162\141\160\73\142\x6f\170\x2d\x73\151\x7a\151\156\147\72\x20\x62\157\162\144\145\x72\55\142\157\x78\x3b\x62\157\162\144\x65\x72\x2d\x63\157\x6c\157\162\72\40\x23\x30\x30\x37\x33\101\101\x3b\142\157\170\x2d\163\150\x61\x64\x6f\167\72\40\x30\160\x78\40\x31\160\x78\x20\x30\160\170\40\x72\x67\142\141\x28\61\62\60\x2c\x20\x32\x30\60\54\x20\x32\x33\x30\54\40\x30\x2e\x36\51\40\151\x6e\163\145\x74\73\143\157\x6c\x6f\162\72\x20\x23\x46\106\106\x3b\x22\164\171\x70\x65\x3d\x22\x62\x75\164\164\157\x6e\42\x20\166\x61\x6c\165\145\x3d\42\104\157\x6e\145\42\40\x6f\156\x43\x6c\x69\x63\153\x3d\42\163\x65\154\146\x2e\x63\154\x6f\163\145\50\51\73\42\x3e\74\57\144\x69\166\76";
        exit;
        mo_saml_download_logs($iV, $Se);
        xTQ:
        goto hsH;
        ED4:
        return TRUE;
        hsH:
        CCI:
        qqK:
    }
    private static function findCertificate(array $a5, array $UH, $fG)
    {
        $sl = array();
        foreach ($UH as $Xf) {
            $SI = strtolower(sha1(base64_decode($Xf)));
            if (!in_array($SI, $a5, TRUE)) {
                goto PrM;
            }
            $J2 = "\55\x2d\x2d\55\55\x42\x45\107\x49\116\40\x43\105\122\x54\111\106\111\x43\x41\124\105\x2d\x2d\55\x2d\x2d\12" . chunk_split($Xf, 64) . "\55\55\55\55\55\x45\116\104\x20\103\105\x52\124\x49\x46\111\103\101\x54\105\55\x2d\x2d\55\x2d\xa";
            return $J2;
            PrM:
            $sl[] = $SI;
            SF3:
        }
        Jzo:
        return false;
    }
    private static function doDecryptElement(DOMElement $vs, XMLSecurityKey $h2, array &$Re)
    {
        $MP = new XMLSecEnc();
        $MP->setNode($vs);
        $MP->type = $vs->getAttribute("\124\171\x70\145");
        $bq = $MP->locateKey($vs);
        if ($bq) {
            goto rzq;
        }
        echo sprintf("\x43\157\165\154\144\40\x6e\x6f\x74\x20\x6c\157\143\141\x74\x65\x20\x6b\145\171\40\x61\x6c\147\157\x72\151\x74\150\x6d\x20\x69\156\40\x65\156\x63\x72\171\x70\164\x65\x64\x20\144\x61\164\x61\x2e");
        exit;
        rzq:
        $ah = $MP->locateKeyInfo($bq);
        if ($ah) {
            goto rN4;
        }
        echo sprintf("\x43\x6f\165\x6c\144\x20\156\x6f\x74\40\154\x6f\x63\141\x74\145\40\74\x64\x73\151\147\72\x4b\145\171\111\x6e\146\x6f\x3e\x20\x66\157\x72\x20\164\x68\145\x20\x65\156\x63\x72\171\x70\164\145\144\x20\153\145\171\x2e");
        exit;
        rN4:
        $Gv = $h2->getAlgorith();
        if ($ah->isEncrypted) {
            goto cER;
        }
        $iL = $bq->getAlgorith();
        if (!($Gv !== $iL)) {
            goto NLT;
        }
        echo sprintf("\x41\x6c\x67\x6f\x72\x69\x74\150\x6d\40\155\151\x73\155\x61\164\x63\150\40\142\145\164\x77\145\145\156\x20\151\x6e\160\x75\164\x20\x6b\x65\x79\40\141\x6e\x64\40\153\x65\x79\40\x69\156\40\x6d\x65\163\x73\141\147\x65\x2e\x20" . "\113\145\x79\x20\x77\141\163\x3a\x20" . var_export($Gv, TRUE) . "\73\x20\155\145\163\x73\141\x67\145\x20\x77\x61\x73\72\x20" . var_export($iL, TRUE));
        exit;
        NLT:
        $bq = $h2;
        goto hkO;
        cER:
        $nS = $ah->getAlgorith();
        if (!in_array($nS, $Re, TRUE)) {
            goto TmR;
        }
        echo sprintf("\101\154\147\x6f\162\x69\164\x68\155\40\144\151\163\141\x62\x6c\x65\x64\x3a\40" . var_export($nS, TRUE));
        exit;
        TmR:
        if (!($nS === XMLSecurityKey::RSA_OAEP_MGF1P && $Gv === XMLSecurityKey::RSA_1_5)) {
            goto Wd5;
        }
        $Gv = XMLSecurityKey::RSA_OAEP_MGF1P;
        Wd5:
        if (!($Gv !== $nS)) {
            goto jHt;
        }
        echo sprintf("\x41\154\147\x6f\162\x69\x74\150\x6d\x20\x6d\151\163\x6d\x61\x74\x63\150\x20\142\145\164\x77\x65\145\x6e\x20\151\156\160\x75\164\40\153\x65\x79\40\x61\156\144\40\153\145\171\x20\165\163\x65\x64\40\x74\x6f\40\x65\156\x63\x72\x79\x70\164\x20" . "\40\x74\x68\x65\40\163\x79\155\x6d\x65\x74\x72\x69\143\x20\153\x65\x79\x20\146\x6f\162\40\164\150\x65\x20\x6d\145\163\163\x61\147\145\56\40\x4b\x65\x79\x20\x77\x61\163\72\40" . var_export($Gv, TRUE) . "\73\x20\155\145\x73\x73\x61\x67\145\x20\x77\x61\x73\72\40" . var_export($nS, TRUE));
        exit;
        jHt:
        $CV = $ah->encryptedCtx;
        $ah->key = $h2->key;
        $ZE = $bq->getSymmetricKeySize();
        if (!($ZE === NULL)) {
            goto Qar;
        }
        echo sprintf("\x55\156\153\x6e\x6f\167\x6e\x20\x6b\145\x79\x20\x73\x69\x7a\145\x20\146\157\x72\40\145\x6e\x63\x72\171\x70\164\151\157\156\40\x61\x6c\147\x6f\x72\151\x74\150\155\x3a\x20" . var_export($bq->type, TRUE));
        exit;
        Qar:
        try {
            $ez = $CV->decryptKey($ah);
            if (!(strlen($ez) != $ZE)) {
                goto vQy;
            }
            echo sprintf("\x55\x6e\x65\170\160\x65\143\164\x65\x64\x20\x6b\145\x79\x20\x73\151\172\145\40\x28" . strlen($ez) * 8 . "\142\151\164\x73\x29\40\146\157\x72\x20\x65\x6e\143\162\171\x70\164\151\157\x6e\x20\141\x6c\x67\157\x72\x69\x74\x68\155\x3a\x20" . var_export($bq->type, TRUE));
            exit;
            vQy:
        } catch (Exception $aW) {
            $ub = $CV->getCipherValue();
            $AI = openssl_pkey_get_details($ah->key);
            $AI = sha1(serialize($AI), TRUE);
            $ez = sha1($ub . $AI, TRUE);
            if (strlen($ez) > $ZE) {
                goto Qsq;
            }
            if (strlen($ez) < $ZE) {
                goto dhp;
            }
            goto B73;
            Qsq:
            $ez = substr($ez, 0, $ZE);
            goto B73;
            dhp:
            $ez = str_pad($ez, $ZE);
            B73:
        }
        $bq->loadkey($ez);
        hkO:
        $HJ = $bq->getAlgorith();
        if (!in_array($HJ, $Re, TRUE)) {
            goto Aew;
        }
        echo sprintf("\101\154\x67\x6f\162\151\164\150\x6d\40\144\151\x73\141\x62\154\145\144\72\40" . var_export($HJ, TRUE));
        exit;
        Aew:
        $cN = $MP->decryptNode($bq, FALSE);
        $DH = "\x3c\162\157\x6f\x74\x20\x78\x6d\154\x6e\x73\72\x73\141\155\x6c\75\x22\165\x72\x6e\x3a\157\x61\x73\x69\x73\72\156\x61\x6d\145\163\x3a\x74\x63\72\123\101\115\114\x3a\x32\56\60\x3a\141\x73\x73\145\x72\x74\x69\157\156\x22\x20" . "\x78\x6d\x6c\x6e\x73\x3a\x78\x73\151\x3d\x22\150\x74\x74\160\x3a\x2f\57\167\167\x77\x2e\167\x33\56\x6f\162\147\57\62\60\x30\61\x2f\130\115\x4c\x53\x63\x68\x65\155\141\55\151\x6e\x73\164\x61\x6e\x63\x65\42\76" . $cN . "\74\x2f\x72\157\157\x74\76";
        $Fw = new DOMDocument();
        if (@$Fw->loadXML($DH)) {
            goto sZl;
        }
        echo sprintf("\106\141\151\x6c\145\x64\40\x74\157\40\160\x61\162\x73\x65\x20\x64\x65\143\162\171\160\164\x65\144\x20\x58\115\x4c\56\40\x4d\x61\171\142\x65\x20\x74\150\145\x20\167\x72\x6f\x6e\147\x20\163\150\x61\162\145\x64\153\x65\x79\x20\167\x61\x73\x20\x75\163\145\144\x3f");
        throw new Exception("\x46\x61\151\x6c\x65\x64\x20\164\157\x20\x70\141\162\x73\x65\40\144\x65\143\x72\171\x70\x74\x65\144\40\130\x4d\114\x2e\40\115\x61\171\142\x65\x20\164\150\x65\40\167\x72\x6f\156\147\x20\163\x68\x61\162\145\x64\x6b\145\x79\40\x77\x61\163\40\165\x73\145\x64\77");
        sZl:
        $Cr = $Fw->firstChild->firstChild;
        if (!($Cr === NULL)) {
            goto atM;
        }
        echo sprintf("\115\x69\x73\x73\x69\x6e\147\x20\145\x6e\143\x72\x79\160\164\x65\144\40\x65\154\145\155\x65\156\x74\56");
        throw new Exception("\115\x69\163\163\151\x6e\x67\x20\145\156\143\162\171\x70\x74\145\144\40\145\154\145\x6d\145\156\164\56");
        atM:
        if ($Cr instanceof DOMElement) {
            goto pZH;
        }
        echo sprintf("\x44\x65\x63\x72\x79\x70\x74\145\x64\40\x65\154\x65\x6d\x65\x6e\164\x20\167\141\x73\40\x6e\157\164\x20\141\x63\164\165\141\154\154\171\x20\x61\40\x44\117\115\x45\x6c\x65\x6d\145\156\164\56");
        pZH:
        return $Cr;
    }
    public static function decryptElement(DOMElement $vs, XMLSecurityKey $h2, array $Re = array(), XMLSecurityKey $sw = NULL)
    {
        try {
            return self::doDecryptElement($vs, $h2, $Re);
        } catch (Exception $aW) {
            echo sprintf("\106\x61\x69\154\145\x64\40\x74\157\40\144\145\143\162\171\160\x74\40\x58\x4d\x4c\x20\x65\154\x65\155\x65\156\x74\x2e");
            exit;
        }
    }
    public static function get_mapped_groups($I9, $yO)
    {
        $YQ = array();
        if (empty($yO)) {
            goto sTx;
        }
        $Hq = array();
        $fD = 1;
        Lry:
        if (!($fD < 10)) {
            goto GsO;
        }
        $V4 = $I9->get("\147\162\x6f\165\x70" . $fD . "\137\155\x61\160");
        $Hq[$fD] = explode("\73", $V4);
        $fD++;
        goto Lry;
        GsO:
        sTx:
        foreach ($yO as $qf) {
            if (empty($qf)) {
                goto BJY;
            }
            $fD = 0;
            $uy = false;
            bt3:
            if (!($fD < 9 && !$uy)) {
                goto ueo;
            }
            if (!(!empty($Hq[$fD]) && in_array($qf, $Hq[$fD]))) {
                goto vK1;
            }
            $YQ[] = $I9->get("\x67\x72\157\165\160" . $fD);
            $uy = true;
            vK1:
            $fD++;
            goto bt3;
            ueo:
            BJY:
            xUO:
        }
        T15:
        return array_unique($YQ);
    }
    public static function getEncryptionAlgorithm($Ft)
    {
        switch ($Ft) {
            case "\150\164\164\160\x3a\57\57\x77\167\x77\56\167\x33\x2e\157\x72\147\x2f\x32\x30\x30\x31\57\60\x34\x2f\170\x6d\x6c\145\156\x63\x23\x74\x72\151\160\154\145\144\145\x73\x2d\x63\142\143":
                return XMLSecurityKey::TRIPLEDES_CBC;
                goto OMT;
            case "\x68\x74\x74\x70\72\57\x2f\x77\167\167\x2e\x77\x33\x2e\x6f\x72\147\x2f\x32\60\x30\61\57\60\x34\x2f\170\x6d\154\x65\156\x63\43\141\x65\x73\x31\x32\x38\55\x63\142\143":
                return XMLSecurityKey::AES128_CBC;
            case "\x68\164\x74\x70\72\57\57\167\167\x77\x2e\x77\63\x2e\157\x72\147\x2f\x32\60\x30\61\57\60\64\x2f\x78\x6d\154\145\156\143\x23\x61\x65\x73\61\71\x32\55\143\x62\x63":
                return XMLSecurityKey::AES192_CBC;
                goto OMT;
            case "\150\164\x74\x70\72\x2f\x2f\167\167\167\x2e\x77\x33\56\x6f\x72\x67\x2f\x32\x30\60\x31\57\60\64\x2f\x78\x6d\154\x65\156\x63\43\x61\x65\163\x32\x35\x36\55\143\x62\x63":
                return XMLSecurityKey::AES256_CBC;
                goto OMT;
            case "\x68\x74\164\x70\x3a\57\x2f\x77\167\167\56\x77\63\56\x6f\x72\x67\57\62\60\60\61\x2f\60\64\57\170\155\x6c\145\x6e\x63\43\x72\x73\141\x2d\x31\x5f\x35":
                return XMLSecurityKey::RSA_1_5;
                goto OMT;
            case "\150\x74\164\160\x3a\57\57\x77\x77\x77\56\x77\x33\56\157\162\147\x2f\62\x30\x30\x31\x2f\x30\x34\57\x78\155\x6c\x65\x6e\x63\x23\162\163\x61\55\x6f\x61\145\x70\55\x6d\x67\x66\61\160":
                return XMLSecurityKey::RSA_OAEP_MGF1P;
                goto OMT;
            case "\150\164\x74\x70\x3a\x2f\x2f\167\167\x77\x2e\x77\x33\56\x6f\162\147\57\x32\x30\x30\x30\x2f\x30\x39\57\170\x6d\154\x64\163\151\147\43\x64\163\141\55\163\x68\x61\x31":
                return XMLSecurityKey::DSA_SHA1;
                goto OMT;
            case "\x68\164\x74\160\72\x2f\x2f\x77\167\167\x2e\167\x33\x2e\x6f\x72\147\x2f\62\60\x30\60\x2f\x30\71\x2f\170\155\154\x64\163\151\147\43\x72\x73\x61\x2d\x73\150\x61\61":
                return XMLSecurityKey::RSA_SHA1;
                goto OMT;
            case "\150\x74\164\160\x3a\57\x2f\x77\x77\x77\56\x77\63\56\x6f\x72\x67\57\x32\60\x30\x31\57\60\x34\x2f\170\155\154\x64\163\151\x67\x2d\155\157\x72\145\43\x72\x73\x61\55\x73\x68\141\62\65\x36":
                return XMLSecurityKey::RSA_SHA256;
                goto OMT;
            case "\x68\x74\164\x70\x3a\x2f\57\x77\167\167\56\167\63\56\157\162\x67\57\x32\x30\x30\x31\x2f\x30\x34\57\170\155\x6c\144\163\x69\x67\x2d\x6d\157\162\x65\43\x72\163\x61\55\163\150\141\63\x38\x34":
                return XMLSecurityKey::RSA_SHA384;
                goto OMT;
            case "\x68\164\x74\160\72\57\x2f\x77\167\167\56\x77\x33\56\x6f\162\x67\x2f\x32\60\60\61\x2f\x30\64\57\x78\x6d\x6c\144\x73\151\x67\55\x6d\x6f\162\145\43\162\163\x61\x2d\163\x68\141\x35\x31\62":
                return XMLSecurityKey::RSA_SHA512;
                goto OMT;
            default:
                echo sprintf("\111\156\x76\141\154\x69\x64\40\x45\156\x63\162\x79\x70\x74\151\x6f\156\40\x4d\x65\164\x68\157\x64\x3a\40" . $Ft);
                exit;
                goto OMT;
        }
        wmI:
        OMT:
    }
    public static function insertSignature(XMLSecurityKey $ez, array $UH, DOMElement $WB, DOMNode $Ye = NULL)
    {
        $p6 = new XMLSecurityDSig();
        $p6->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
        switch ($ez->type) {
            case XMLSecurityKey::RSA_SHA256:
                $Si = XMLSecurityDSig::SHA256;
                goto hpu;
            case XMLSecurityKey::RSA_SHA384:
                $Si = XMLSecurityDSig::SHA384;
                goto hpu;
            case XMLSecurityKey::RSA_SHA512:
                $Si = XMLSecurityDSig::SHA512;
                goto hpu;
            default:
                $Si = XMLSecurityDSig::SHA1;
        }
        MfA:
        hpu:
        $p6->addReferenceList(array($WB), $Si, array("\150\164\x74\x70\x3a\57\57\x77\x77\167\x2e\x77\63\x2e\157\162\x67\57\x32\x30\60\60\x2f\x30\x39\57\170\155\x6c\144\163\151\147\43\x65\156\166\x65\x6c\x6f\x70\145\x64\55\x73\151\x67\156\141\164\x75\x72\x65", XMLSecurityDSig::EXC_C14N), array("\x69\x64\x5f\156\141\x6d\145" => "\111\x44", "\157\x76\145\162\167\x72\151\x74\x65" => FALSE));
        $p6->sign($ez);
        foreach ($UH as $mC) {
            $p6->add509Cert($mC, TRUE);
            c1z:
        }
        nSy:
        $p6->insertSignature($WB, $Ye);
    }
    public static function getRemainingDaysOfCurrentCertificate()
    {
        $mC = get_site_option("\155\157\x5f\163\141\155\154\137\143\x75\x72\x72\x65\156\x74\137\143\x65\162\x74");
        $fa = openssl_x509_parse($mC);
        $To = $fa["\166\x61\154\x69\x64\x54\x6f\137\164\151\x6d\x65\x5f\164"];
        $Pa = $To - time();
        return round($Pa / (60 * 60 * 24));
    }
    public static function getExpiryDateOfCurrentCertificate()
    {
        $mC = get_site_option("\155\x6f\x5f\163\x61\155\x6c\137\143\x75\162\162\145\x6e\x74\137\143\145\162\164");
        $fa = openssl_x509_parse($mC);
        return $fa["\x76\141\x6c\151\144\124\x6f\137\164\x69\x6d\145\x5f\x74"];
    }
    public static function getValidUntilDateFromCert($mC)
    {
        $fa = openssl_x509_parse($mC);
        $To = $fa["\166\141\154\151\x64\x54\157\x5f\x74\x69\155\x65\x5f\x74"];
        $HI = date("\131\x2d\155\55\144", $To);
        $dg = $HI . "\x54\62\63\72\x35\x39\72\x35\71\132";
        return $dg;
    }
    public static function signXML($DH, $tg = '', $Od = false)
    {
        $N7 = array("\164\x79\160\x65" => "\x70\162\x69\166\x61\x74\145");
        $ez = new XMLSecurityKey(XMLSecurityKey::RSA_SHA256, $N7);
        if ($Od) {
            goto D8M;
        }
        $pr = get_site_option("\x6d\157\x5f\x73\141\x6d\154\x5f\143\165\x72\x72\145\156\164\137\x63\145\162\164\x5f\x70\x72\x69\166\141\x74\145\x5f\x6b\145\171");
        $zX = get_site_option("\x6d\x6f\x5f\163\141\155\x6c\x5f\143\165\162\x72\145\x6e\164\x5f\x63\x65\x72\x74");
        goto WGk;
        D8M:
        $pr = file_get_contents(plugin_dir_path(__FILE__) . "\162\x65\x73\x6f\x75\162\x63\x65\x73" . DIRECTORY_SEPARATOR . mo_options_enum_default_sp_certificate::SP_Private_Key);
        $zX = file_get_contents(plugin_dir_path(__FILE__) . "\162\x65\x73\x6f\x75\162\143\145\x73" . DIRECTORY_SEPARATOR . mo_options_enum_default_sp_certificate::SP_Public_Certificate);
        WGk:
        $ez->loadKey($pr, FALSE);
        $x4 = new DOMDocument();
        $x4->loadXML($DH);
        $GN = $x4->firstChild;
        if (!empty($tg)) {
            goto zwG;
        }
        self::insertSignature($ez, array($zX), $GN);
        goto rPj;
        zwG:
        $iF = $x4->getElementsByTagName($tg)->item(0);
        self::insertSignature($ez, array($zX), $GN, $iF);
        rPj:
        $fW = $GN->ownerDocument->saveXML($GN);
        $zv = base64_encode($fW);
        return $zv;
    }
    public static function postSAMLRequest($dK, $b8, $fG)
    {
        echo "\74\150\x74\x6d\x6c\x3e\x3c\150\x65\141\144\76\74\x73\143\162\151\x70\164\40\163\x72\x63\75\47\150\164\164\x70\163\72\x2f\57\x63\157\144\x65\x2e\152\x71\x75\145\x72\171\56\x63\157\x6d\57\152\x71\165\145\162\171\55\x31\x2e\61\61\x2e\63\56\155\x69\156\x2e\x6a\163\47\x3e\x3c\57\x73\x63\162\x69\160\x74\x3e\74\x73\143\x72\151\x70\164\x20\164\x79\160\145\75\42\x74\145\x78\x74\57\152\141\166\x61\163\143\162\x69\x70\x74\42\x3e\x24\50\x66\165\x6e\143\x74\151\157\156\50\x29\173\144\x6f\143\165\155\145\156\164\56\x66\157\162\x6d\163\133\47\x73\x61\x6d\x6c\x2d\162\145\x71\x75\145\163\164\x2d\x66\x6f\162\155\x27\x5d\x2e\x73\x75\x62\x6d\x69\x74\x28\x29\73\175\51\73\x3c\x2f\x73\143\x72\x69\160\x74\76\74\x2f\150\145\141\x64\76\74\x62\157\144\171\76\x50\154\x65\x61\x73\145\x20\x77\141\x69\164\x2e\56\x2e\x3c\146\157\162\155\x20\x61\143\164\151\157\x6e\75\x22" . $dK . "\x22\x20\155\145\x74\x68\x6f\x64\75\42\x70\157\163\x74\x22\x20\151\x64\x3d\42\x73\x61\x6d\154\55\162\145\161\x75\x65\163\x74\55\146\157\x72\155\42\76\74\x69\x6e\160\165\164\40\x74\x79\160\145\x3d\42\150\151\x64\x64\145\x6e\42\40\x6e\141\155\x65\x3d\42\123\x41\x4d\x4c\x52\145\x71\165\145\x73\x74\x22\x20\166\141\154\165\x65\x3d\42" . $b8 . "\x22\40\x2f\76\74\151\156\x70\165\164\40\x74\171\160\145\x3d\42\150\151\x64\144\145\x6e\x22\x20\156\x61\155\x65\75\42\122\145\154\141\x79\x53\x74\141\x74\145\x22\40\166\141\x6c\165\145\75\x22" . htmlentities($fG) . "\42\x20\57\76\74\57\x66\x6f\x72\155\76\x3c\x2f\x62\x6f\x64\171\76\x3c\x2f\x68\x74\x6d\x6c\76";
        exit;
    }
    public static function postSAMLResponse($dK, $S1, $fG)
    {
        echo "\74\150\x74\155\154\76\74\150\x65\141\144\x3e\x3c\x73\x63\162\151\160\164\40\163\x72\x63\x3d\47\150\x74\x74\x70\x73\x3a\57\57\x63\x6f\144\145\56\x6a\161\x75\x65\162\171\56\143\x6f\x6d\x2f\x6a\x71\165\x65\x72\171\55\x31\56\x31\x31\56\63\56\x6d\x69\156\56\x6a\x73\x27\76\x3c\x2f\163\143\x72\x69\160\164\x3e\74\163\x63\x72\x69\x70\x74\40\x74\171\160\145\x3d\42\x74\x65\x78\x74\x2f\x6a\x61\x76\141\163\x63\162\x69\x70\x74\42\76\44\50\146\x75\156\143\164\151\x6f\156\50\x29\x7b\144\157\143\x75\155\x65\156\164\56\x66\x6f\x72\x6d\x73\x5b\x27\163\x61\155\154\x2d\x72\145\161\165\x65\x73\x74\x2d\146\x6f\162\155\x27\135\x2e\x73\165\x62\x6d\x69\164\x28\51\73\x7d\x29\73\74\x2f\x73\143\x72\151\160\x74\76\74\57\150\x65\x61\x64\76\x3c\x62\x6f\x64\171\x3e\x50\154\145\141\x73\x65\x20\167\141\151\x74\x2e\56\x2e\x3c\146\157\x72\x6d\x20\x61\x63\x74\x69\x6f\x6e\x3d\42" . $dK . "\42\40\x6d\145\x74\x68\157\x64\x3d\42\x70\157\163\x74\42\x20\x69\x64\x3d\42\163\x61\155\154\x2d\x72\x65\161\165\x65\163\164\x2d\x66\x6f\x72\155\x22\x3e\x3c\x69\156\160\165\164\x20\x74\x79\160\145\x3d\42\150\151\144\x64\145\x6e\x22\x20\156\141\155\x65\75\x22\x53\x41\x4d\114\x52\x65\163\x70\157\156\163\145\42\x20\x76\141\154\x75\x65\75\42" . $S1 . "\42\40\57\x3e\x3c\151\x6e\x70\165\x74\40\164\171\x70\x65\x3d\x22\150\151\x64\x64\x65\x6e\x22\x20\x6e\141\155\145\x3d\42\122\x65\x6c\x61\171\123\164\x61\x74\145\42\40\166\141\154\165\145\x3d\42" . htmlentities($fG) . "\42\40\x2f\x3e\x3c\x2f\x66\157\162\x6d\76\x3c\57\142\157\x64\171\x3e\74\x2f\150\x74\x6d\154\x3e";
        exit;
    }
    public static function sanitize_certificate($mC)
    {
        $mC = preg_replace("\57\x5b\xd\xa\135\53\x2f", '', $mC);
        $mC = str_replace("\55", '', $mC);
        $mC = str_replace("\102\x45\x47\x49\x4e\x20\x43\x45\x52\124\x49\106\111\103\x41\124\105", '', $mC);
        $mC = str_replace("\x45\116\x44\40\x43\x45\122\124\x49\106\x49\103\101\x54\x45", '', $mC);
        $mC = str_replace("\40", '', $mC);
        $mC = chunk_split($mC, 64, "\xd\12");
        $mC = "\55\x2d\x2d\x2d\x2d\102\x45\107\111\x4e\40\x43\x45\x52\124\x49\x46\111\x43\101\124\x45\x2d\55\55\x2d\x2d\15\12" . $mC . "\55\x2d\x2d\x2d\x2d\105\116\104\x20\103\x45\x52\x54\111\x46\x49\103\x41\124\105\55\55\x2d\x2d\55";
        return $mC;
    }
    public static function desanitize_certificate($mC)
    {
        $mC = preg_replace("\x2f\133\15\xa\135\53\57", '', $mC);
        $mC = str_replace("\55\x2d\x2d\55\55\x42\x45\107\x49\x4e\40\x43\105\122\124\x49\x46\x49\x43\101\124\105\x2d\55\55\x2d\55", '', $mC);
        $mC = str_replace("\x2d\55\55\55\x2d\x45\116\104\40\103\105\122\x54\x49\106\111\103\101\124\105\55\55\55\55\55", '', $mC);
        $mC = str_replace("\x20", '', $mC);
        return $mC;
    }
    public static function get_sites()
    {
        $Tn = array("\x6e\145\x74\167\157\162\153\x5f\x69\x64" => null, "\x70\x75\x62\154\x69\143" => null, "\141\162\143\150\151\x76\x65\x64" => 0, "\x6d\x61\164\x75\x72\145" => null, "\x73\x70\141\x6d" => 0, "\x64\x65\x6c\x65\164\145\144" => 0, "\156\x75\155\x62\145\x72" => 500, "\157\x66\x66\x73\x65\164" => 0);
        if (function_exists("\147\145\x74\137\x73\151\x74\145\x73") && class_exists("\x57\120\137\x53\x69\164\x65\x5f\121\x75\145\162\x79")) {
            goto iuR;
        }
        if (!function_exists("\167\160\137\x67\145\x74\x5f\x73\151\x74\x65\163")) {
            goto zNE;
        }
        $dM = wp_get_sites($Tn);
        zNE:
        goto R1A;
        iuR:
        $dM = get_sites($Tn);
        R1A:
        return $dM;
    }
    public static function get_active_sites()
    {
        $AH = maybe_unserialize(get_site_option("\155\x6f\x5f\x65\156\141\142\154\x65\137\163\163\157\137\163\151\164\x65\163"));
        if (!empty($AH)) {
            goto wTj;
        }
        $AH = array();
        $dM = self::get_sites();
        foreach ($dM as $uC) {
            array_push($AH, $uC->blog_id);
            U8y:
        }
        xVf:
        wTj:
        $yF = self::get_main_subsite_id();
        if (in_array($yF, $AH)) {
            goto iWr;
        }
        array_push($AH, $yF);
        iWr:
        return $AH;
    }
    public static function get_all_roles()
    {
        $dM = self::get_sites();
        $T0 = array();
        foreach ($dM as $uC) {
            $vJ = new WP_Roles($uC->blog_id);
            $JZ = $vJ->get_names();
            $T0 = array_merge($T0, $JZ);
            Ws0:
        }
        nA9:
        return $T0;
    }
    public static function get_main_subsite_id()
    {
        $dM = self::get_sites();
        $QU = get_site_option("\x6d\157\137\x73\141\x6d\154\137\163\160\x5f\x62\141\163\145\137\x75\x72\154");
        if (!empty($QU)) {
            goto id0;
        }
        $QU = get_network_site_url();
        id0:
        $T1 = $QU . "\x2f";
        $pb = parse_url($QU, PHP_URL_SCHEME);
        $T1 = str_replace($pb . "\x3a\57\x2f", '', $T1);
        $F4 = 1;
        foreach ($dM as $uC) {
            $XX = $uC->domain . $uC->path;
            if (!($XX == $T1)) {
                goto IR9;
            }
            $F4 = $uC->blog_id;
            IR9:
            PYj:
        }
        Hkx:
        return $F4;
    }
    public static function mo_saml_wp_remote_call($dK, $Iz, $Tn = array(), $kC = false)
    {
        if (!$kC) {
            goto nob;
        }
        $Dr = wp_remote_get($dK, $Tn);
        goto qL1;
        nob:
        $Dr = wp_remote_post($dK, $Tn);
        qL1:
        if (!is_wp_error($Dr)) {
            goto d0W;
        }
        $Xy = $Iz;
        update_option("\155\157\x5f\163\141\155\154\137\155\x65\x73\x73\x61\x67\145", "\125\x6e\141\142\154\145\40\x74\157\40\x63\157\156\x6e\x65\x63\164\x20\164\157\40\x74\x68\145\x20\111\x6e\x74\x65\x72\156\145\x74\56\40\120\x6c\145\x61\163\145\x20\164\162\x79\40\141\147\x61\151\x6e\56");
        $Xy->mo_saml_show_error_message();
        return false;
        goto AeP;
        d0W:
        return $Dr["\142\157\x64\x79"];
        AeP:
    }
}
